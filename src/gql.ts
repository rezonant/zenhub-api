export type Maybe<T> = T | null;
export type InputMaybe<T> = Maybe<T>;
export type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] };
export type MakeOptional<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]?: Maybe<T[SubKey]> };
export type MakeMaybe<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]: Maybe<T[SubKey]> };
/** All built-in and custom scalars, mapped to their actual values */
export type Scalars = {
  ID: string;
  String: string;
  Boolean: boolean;
  Int: number;
  Float: number;
  BigInt: any;
  ISO8601Date: any;
  ISO8601DateTime: any;
  JSON: any;
};

/** Autogenerated input type of AcceptZenhubOrganizationInvite */
export type AcceptZenhubOrganizationInviteInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']>;
  token: Scalars['String'];
};

/** Autogenerated return type of AcceptZenhubOrganizationInvite */
export type AcceptZenhubOrganizationInvitePayload = {
  __typename?: 'AcceptZenhubOrganizationInvitePayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  zenhubOrganization: ZenhubOrganization;
};

/** Autogenerated input type of AddAssigneesToIssues */
export type AddAssigneesToIssuesInput = {
  assigneeIds: Array<Scalars['ID']>;
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']>;
  issueIds: Array<Scalars['ID']>;
};

/** Autogenerated return type of AddAssigneesToIssues */
export type AddAssigneesToIssuesPayload = {
  __typename?: 'AddAssigneesToIssuesPayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  failedIssues: Array<Issue>;
  githubErrors: Scalars['JSON'];
  successCount: Scalars['Int'];
  unassignable: Array<Unassignable>;
};

/** Autogenerated input type of AddAssigneesToZenhubEpics */
export type AddAssigneesToZenhubEpicsInput = {
  assigneeIds: Array<Scalars['ID']>;
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']>;
  zenhubEpicIds: Array<Scalars['ID']>;
};

/** Autogenerated return type of AddAssigneesToZenhubEpics */
export type AddAssigneesToZenhubEpicsPayload = {
  __typename?: 'AddAssigneesToZenhubEpicsPayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  zenhubEpics: Array<ZenhubEpic>;
};

/** Autogenerated input type of AddEpicsToProject */
export type AddEpicsToProjectInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']>;
  epicIds: Array<Scalars['ID']>;
  projectId: Scalars['ID'];
};

/** Autogenerated return type of AddEpicsToProject */
export type AddEpicsToProjectPayload = {
  __typename?: 'AddEpicsToProjectPayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  epics: Array<Epic>;
  previousProjects: Array<Maybe<Project>>;
  project: Project;
};

/** Autogenerated input type of AddEpicsToRoadmap */
export type AddEpicsToRoadmapInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']>;
  epicIds: Array<Scalars['ID']>;
  roadmapId: Scalars['ID'];
};

/** Autogenerated return type of AddEpicsToRoadmap */
export type AddEpicsToRoadmapPayload = {
  __typename?: 'AddEpicsToRoadmapPayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  epics: Array<Epic>;
  roadmap: Roadmap;
};

/** Autogenerated input type of AddEstimateSetValue */
export type AddEstimateSetValueInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']>;
  repositoryGhId: Scalars['Int'];
  value: Scalars['Float'];
};

/** Autogenerated return type of AddEstimateSetValue */
export type AddEstimateSetValuePayload = {
  __typename?: 'AddEstimateSetValuePayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  estimateSet: EstimateSet;
};

/** Autogenerated input type of AddIssuesToEpics */
export type AddIssuesToEpicsInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']>;
  epicIds: Array<Scalars['ID']>;
  issueIds: Array<Scalars['ID']>;
};

/** Autogenerated return type of AddIssuesToEpics */
export type AddIssuesToEpicsPayload = {
  __typename?: 'AddIssuesToEpicsPayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  epics: Array<Epic>;
};

/** Autogenerated input type of AddIssuesToReleases */
export type AddIssuesToReleasesInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']>;
  issueIds: Array<Scalars['ID']>;
  releaseIds: Array<Scalars['ID']>;
};

/** Autogenerated return type of AddIssuesToReleases */
export type AddIssuesToReleasesPayload = {
  __typename?: 'AddIssuesToReleasesPayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  releases: Array<Release>;
};

/** Autogenerated input type of AddIssuesToSprints */
export type AddIssuesToSprintsInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']>;
  issueIds: Array<Scalars['ID']>;
  sprintIds: Array<Scalars['ID']>;
};

/** Autogenerated return type of AddIssuesToSprints */
export type AddIssuesToSprintsPayload = {
  __typename?: 'AddIssuesToSprintsPayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  sprintIssues: Array<SprintIssue>;
};

/** Autogenerated input type of AddIssuesToZenhubEpics */
export type AddIssuesToZenhubEpicsInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']>;
  issueIds: Array<Scalars['ID']>;
  zenhubEpicIds: Array<Scalars['ID']>;
};

/** Autogenerated return type of AddIssuesToZenhubEpics */
export type AddIssuesToZenhubEpicsPayload = {
  __typename?: 'AddIssuesToZenhubEpicsPayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  zenhubEpics: Array<ZenhubEpic>;
};

/** Autogenerated input type of AddLabelsToIssues */
export type AddLabelsToIssuesInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']>;
  issueIds: Array<Scalars['ID']>;
  labelIds: Array<Scalars['ID']>;
};

/** Autogenerated return type of AddLabelsToIssues */
export type AddLabelsToIssuesPayload = {
  __typename?: 'AddLabelsToIssuesPayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  failedIssues: Array<Issue>;
  githubErrors: Scalars['JSON'];
  successCount: Scalars['Int'];
};

/** Autogenerated input type of AddProjectsToRoadmap */
export type AddProjectsToRoadmapInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']>;
  projectIds: Array<Scalars['ID']>;
  roadmapId: Scalars['ID'];
};

/** Autogenerated return type of AddProjectsToRoadmap */
export type AddProjectsToRoadmapPayload = {
  __typename?: 'AddProjectsToRoadmapPayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  projects: Array<Project>;
  roadmap: Roadmap;
};

/** Autogenerated input type of AddRepositoriesToRelease */
export type AddRepositoriesToReleaseInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']>;
  releaseId: Scalars['ID'];
  repositoryGhIds: Array<Scalars['Int']>;
};

/** Autogenerated return type of AddRepositoriesToRelease */
export type AddRepositoriesToReleasePayload = {
  __typename?: 'AddRepositoriesToReleasePayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  release: Release;
};

/** Autogenerated input type of AddRepositoryToWorkspace */
export type AddRepositoryToWorkspaceInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']>;
  repositoryGhId: Scalars['ID'];
  workspaceId: Scalars['ID'];
};

/** Autogenerated return type of AddRepositoryToWorkspace */
export type AddRepositoryToWorkspacePayload = {
  __typename?: 'AddRepositoryToWorkspacePayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  workspaceRepository: WorkspaceRepository;
};

/** Autogenerated input type of AddWorkspaceLabelFilters */
export type AddWorkspaceLabelFiltersInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']>;
  labelNames: Array<Scalars['String']>;
  workspaceId: Scalars['ID'];
};

/** Autogenerated return type of AddWorkspaceLabelFilters */
export type AddWorkspaceLabelFiltersPayload = {
  __typename?: 'AddWorkspaceLabelFiltersPayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  workspace: Workspace;
  /** created label filters */
  workspaceLabelFilters: Array<WorkspaceLabelFilter>;
};

/** Autogenerated input type of AddZenhubEpicsToProject */
export type AddZenhubEpicsToProjectInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']>;
  projectId: Scalars['ID'];
  zenhubEpicIds: Array<Scalars['ID']>;
};

/** Autogenerated return type of AddZenhubEpicsToProject */
export type AddZenhubEpicsToProjectPayload = {
  __typename?: 'AddZenhubEpicsToProjectPayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  previousProjects: Array<Maybe<Project>>;
  project: Project;
  zenhubEpics: Array<ZenhubEpic>;
};

/** Autogenerated input type of AddZenhubEpicsToRoadmap */
export type AddZenhubEpicsToRoadmapInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']>;
  roadmapId: Scalars['ID'];
  zenhubEpicIds: Array<Scalars['ID']>;
};

/** Autogenerated return type of AddZenhubEpicsToRoadmap */
export type AddZenhubEpicsToRoadmapPayload = {
  __typename?: 'AddZenhubEpicsToRoadmapPayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  roadmap: Roadmap;
  zenhubEpics: Array<ZenhubEpic>;
};

/** Autogenerated input type of AddZenhubLabelsToZenhubEpics */
export type AddZenhubLabelsToZenhubEpicsInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']>;
  zenhubEpicIds: Array<Scalars['ID']>;
  zenhubLabelIds: Array<Scalars['ID']>;
};

/** Autogenerated return type of AddZenhubLabelsToZenhubEpics */
export type AddZenhubLabelsToZenhubEpicsPayload = {
  __typename?: 'AddZenhubLabelsToZenhubEpicsPayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  zenhubEpics: Array<ZenhubEpic>;
};

export type AnomalousIssue = {
  __typename?: 'AnomalousIssue';
  duration: Scalars['Int'];
  issue: Issue;
};

export type Blockage = Node & Timestamps & {
  __typename?: 'Blockage';
  blocked: IssueDependencyItem;
  blocking: IssueDependencyItem;
  createdAt: Scalars['ISO8601DateTime'];
  id: Scalars['ID'];
  updatedAt: Scalars['ISO8601DateTime'];
};

export type Bot = Owner & Timestamps & {
  __typename?: 'Bot';
  avatarUrl: Scalars['String'];
  createdAt: Scalars['ISO8601DateTime'];
  ghId?: Maybe<Scalars['Int']>;
  hasWorkspace: Scalars['Boolean'];
  id: Scalars['ID'];
  login: Scalars['String'];
  projects: ProjectConnection;
  repositoryFavorites: RepositoryFavoriteConnection;
  roadmapItems: RoadmapItemConnection;
  searchWorkspaces: WorkspaceSearchMatchConnection;
  type: Scalars['String'];
  updatedAt: Scalars['ISO8601DateTime'];
  workspaceFavorites: WorkspaceFavoriteConnection;
};


export type BotProjectsArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
};


export type BotRepositoryFavoritesArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
};


export type BotRoadmapItemsArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
};


export type BotSearchWorkspacesArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  query: Scalars['String'];
  repositoryGhIds?: InputMaybe<Array<Scalars['Int']>>;
};


export type BotWorkspaceFavoritesArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
};

export enum BucketIssueHistoryAction {
  IssueAdded = 'ISSUE_ADDED',
  IssueRemoved = 'ISSUE_REMOVED'
}

/** Autogenerated input type of CloseIssues */
export type CloseIssuesInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']>;
  issueIds: Array<Scalars['ID']>;
};

/** Autogenerated return type of CloseIssues */
export type CloseIssuesPayload = {
  __typename?: 'CloseIssuesPayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  failedIssues: Array<Issue>;
  githubErrors: Scalars['JSON'];
  successCount: Scalars['Int'];
};

/** Autogenerated input type of CreateEpicFromIssue */
export type CreateEpicFromIssueInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']>;
  epicChildIds?: InputMaybe<Array<Scalars['ID']>>;
  issueId: Scalars['ID'];
};

/** Autogenerated return type of CreateEpicFromIssue */
export type CreateEpicFromIssuePayload = {
  __typename?: 'CreateEpicFromIssuePayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  epic: Epic;
};

/** Autogenerated input type of CreateEpic */
export type CreateEpicInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']>;
  issue: IssueInput;
};

/** Autogenerated input type of CreateEpicOnProject */
export type CreateEpicOnProjectInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']>;
  epic: EpicInput;
  projectId: Scalars['ID'];
};

/** Autogenerated return type of CreateEpicOnProject */
export type CreateEpicOnProjectPayload = {
  __typename?: 'CreateEpicOnProjectPayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  epic: Epic;
  project: Project;
};

/** Autogenerated input type of CreateEpicOnRoadmap */
export type CreateEpicOnRoadmapInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']>;
  epic: EpicInput;
  roadmapId: Scalars['ID'];
};

/** Autogenerated return type of CreateEpicOnRoadmap */
export type CreateEpicOnRoadmapPayload = {
  __typename?: 'CreateEpicOnRoadmapPayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  epic: Epic;
  roadmap: Roadmap;
};

/** Autogenerated return type of CreateEpic */
export type CreateEpicPayload = {
  __typename?: 'CreateEpicPayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  epic: Epic;
};

/** Autogenerated input type of CreateIssueDependency */
export type CreateIssueDependencyInput = {
  blockedIssue: IssueInfoInput;
  blockingIssue: IssueInfoInput;
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']>;
};

/** Autogenerated return type of CreateIssueDependency */
export type CreateIssueDependencyPayload = {
  __typename?: 'CreateIssueDependencyPayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  issueDependency: IssueDependency;
};

/** Autogenerated input type of CreateIssue */
export type CreateIssueInput = {
  assignees?: InputMaybe<Array<Scalars['String']>>;
  body?: InputMaybe<Scalars['String']>;
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']>;
  labels?: InputMaybe<Array<Scalars['String']>>;
  repositoryId: Scalars['ID'];
  title: Scalars['String'];
};

/** Autogenerated return type of CreateIssue */
export type CreateIssuePayload = {
  __typename?: 'CreateIssuePayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  issue: Issue;
};

/** Autogenerated input type of CreateIssuePrConnection */
export type CreateIssuePrConnectionInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']>;
  issueId: Scalars['ID'];
  pullRequestId: Scalars['ID'];
};

/** Autogenerated return type of CreateIssuePrConnection */
export type CreateIssuePrConnectionPayload = {
  __typename?: 'CreateIssuePrConnectionPayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  issue: Issue;
  pullRequest: Issue;
};

/** Autogenerated input type of CreatePipeline */
export type CreatePipelineInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']>;
  description?: InputMaybe<Scalars['String']>;
  name: Scalars['String'];
  position?: InputMaybe<Scalars['Int']>;
  workspaceId: Scalars['ID'];
};

/** Autogenerated return type of CreatePipeline */
export type CreatePipelinePayload = {
  __typename?: 'CreatePipelinePayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  pipeline: Pipeline;
};

/** Autogenerated input type of CreatePipelineToPipelineAutomation */
export type CreatePipelineToPipelineAutomationInput = {
  applyRetroactively?: InputMaybe<Scalars['Boolean']>;
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']>;
  destinationPipelineId: Scalars['ID'];
  sourcePipelineId: Scalars['ID'];
};

/** Autogenerated return type of CreatePipelineToPipelineAutomation */
export type CreatePipelineToPipelineAutomationPayload = {
  __typename?: 'CreatePipelineToPipelineAutomationPayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  movedIssuesCount?: Maybe<Scalars['Int']>;
  pipelineToPipelineAutomation: PipelineToPipelineAutomation;
};

/** Autogenerated input type of CreateProjectOnRoadmap */
export type CreateProjectOnRoadmapInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']>;
  project: ProjectInput;
  roadmapId: Scalars['ID'];
};

/** Autogenerated return type of CreateProjectOnRoadmap */
export type CreateProjectOnRoadmapPayload = {
  __typename?: 'CreateProjectOnRoadmapPayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  project: Project;
  roadmap: Roadmap;
};

/** Autogenerated input type of CreateRelease */
export type CreateReleaseInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']>;
  release: ReleaseCreateInput;
};

/** Autogenerated return type of CreateRelease */
export type CreateReleasePayload = {
  __typename?: 'CreateReleasePayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  release: Release;
};

/** Autogenerated input type of CreateSprintConfig */
export type CreateSprintConfigInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']>;
  sprintConfig: SprintConfigCreateInput;
};

/** Autogenerated return type of CreateSprintConfig */
export type CreateSprintConfigPayload = {
  __typename?: 'CreateSprintConfigPayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  sprintConfig: SprintConfig;
};

/** Autogenerated input type of CreateWorkspace */
export type CreateWorkspaceInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']>;
  defaultRepositoryGhId?: InputMaybe<Scalars['Int']>;
  description?: InputMaybe<Scalars['String']>;
  githubProject?: InputMaybe<GithubProjectInput>;
  name: Scalars['String'];
  repositoryGhIds?: InputMaybe<Array<Scalars['Int']>>;
  zenhubOrganizationId?: InputMaybe<Scalars['ID']>;
};

/** Autogenerated return type of CreateWorkspace */
export type CreateWorkspacePayload = {
  __typename?: 'CreateWorkspacePayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  workspace: Workspace;
};

/** Autogenerated input type of CreateZenhubEpic */
export type CreateZenhubEpicInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']>;
  zenhubEpic: ZenhubEpicInput;
  zenhubOrganizationId: Scalars['ID'];
};

/** Autogenerated input type of CreateZenhubEpicOnProject */
export type CreateZenhubEpicOnProjectInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']>;
  projectId: Scalars['ID'];
  zenhubEpic: ZenhubEpicInput;
};

/** Autogenerated return type of CreateZenhubEpicOnProject */
export type CreateZenhubEpicOnProjectPayload = {
  __typename?: 'CreateZenhubEpicOnProjectPayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  project: Project;
  zenhubEpic: ZenhubEpic;
};

/** Autogenerated input type of CreateZenhubEpicOnRoadmap */
export type CreateZenhubEpicOnRoadmapInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']>;
  roadmapId: Scalars['ID'];
  zenhubEpic: ZenhubEpicInput;
};

/** Autogenerated return type of CreateZenhubEpicOnRoadmap */
export type CreateZenhubEpicOnRoadmapPayload = {
  __typename?: 'CreateZenhubEpicOnRoadmapPayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  roadmap: Roadmap;
  zenhubEpic: ZenhubEpic;
};

/** Autogenerated return type of CreateZenhubEpic */
export type CreateZenhubEpicPayload = {
  __typename?: 'CreateZenhubEpicPayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  zenhubEpic: ZenhubEpic;
};

/** Autogenerated input type of CreateZenhubOrganization */
export type CreateZenhubOrganizationInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']>;
  name: Scalars['String'];
};

/** Autogenerated input type of CreateZenhubOrganizationInvite */
export type CreateZenhubOrganizationInviteInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']>;
  emailProperties?: InputMaybe<EmailPropertiesInput>;
  expireInDays: Scalars['Int'];
  zenhubOrganizationId: Scalars['ID'];
};

/** Autogenerated return type of CreateZenhubOrganizationInvite */
export type CreateZenhubOrganizationInvitePayload = {
  __typename?: 'CreateZenhubOrganizationInvitePayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  token: Scalars['String'];
};

/** Autogenerated return type of CreateZenhubOrganization */
export type CreateZenhubOrganizationPayload = {
  __typename?: 'CreateZenhubOrganizationPayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  zenhubOrganization: ZenhubOrganization;
};

/** Autogenerated input type of DeleteEpicByIssueInfo */
export type DeleteEpicByIssueInfoInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']>;
  issue: IssueInfoInput;
};

/** Autogenerated return type of DeleteEpicByIssueInfo */
export type DeleteEpicByIssueInfoPayload = {
  __typename?: 'DeleteEpicByIssueInfoPayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  epic: Epic;
};

/** Autogenerated input type of DeleteIssueDependency */
export type DeleteIssueDependencyInput = {
  blockedIssue: IssueInfoInput;
  blockingIssue: IssueInfoInput;
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']>;
};

/** Autogenerated return type of DeleteIssueDependency */
export type DeleteIssueDependencyPayload = {
  __typename?: 'DeleteIssueDependencyPayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  issueDependency: IssueDependency;
};

/** Autogenerated input type of DeleteIssuePrConnection */
export type DeleteIssuePrConnectionInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']>;
  issueId: Scalars['ID'];
  pullRequestId: Scalars['ID'];
};

/** Autogenerated return type of DeleteIssuePrConnection */
export type DeleteIssuePrConnectionPayload = {
  __typename?: 'DeleteIssuePrConnectionPayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  issue: Issue;
  pullRequest: Issue;
};

/** Autogenerated input type of DeletePipeline */
export type DeletePipelineInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']>;
  destinationPipelineId: Scalars['ID'];
  pipelineId: Scalars['ID'];
};

/** Autogenerated return type of DeletePipeline */
export type DeletePipelinePayload = {
  __typename?: 'DeletePipelinePayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  destinationPipeline: Pipeline;
};

/** Autogenerated input type of DeletePipelineToPipelineAutomation */
export type DeletePipelineToPipelineAutomationInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']>;
  pipelineToPipelineAutomationId: Scalars['ID'];
};

/** Autogenerated return type of DeletePipelineToPipelineAutomation */
export type DeletePipelineToPipelineAutomationPayload = {
  __typename?: 'DeletePipelineToPipelineAutomationPayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  pipelineToPipelineAutomation: PipelineToPipelineAutomation;
};

/** Autogenerated input type of DeleteProject */
export type DeleteProjectInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']>;
  projectId: Scalars['ID'];
};

/** Autogenerated return type of DeleteProject */
export type DeleteProjectPayload = {
  __typename?: 'DeleteProjectPayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  projectId: Scalars['ID'];
};

/** Autogenerated input type of DeleteSprintConfigAndOpenSprints */
export type DeleteSprintConfigAndOpenSprintsInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']>;
  workspaceId: Scalars['ID'];
};

/** Autogenerated return type of DeleteSprintConfigAndOpenSprints */
export type DeleteSprintConfigAndOpenSprintsPayload = {
  __typename?: 'DeleteSprintConfigAndOpenSprintsPayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  workspace: Workspace;
};

/** Autogenerated input type of DeleteWorkspaceFavorite */
export type DeleteWorkspaceFavoriteInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']>;
  workspaceId: Scalars['ID'];
};

/** Autogenerated return type of DeleteWorkspaceFavorite */
export type DeleteWorkspaceFavoritePayload = {
  __typename?: 'DeleteWorkspaceFavoritePayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  workspace: Workspace;
};

/** Autogenerated input type of DeleteWorkspace */
export type DeleteWorkspaceInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']>;
  workspaceId: Scalars['ID'];
};

/** Autogenerated return type of DeleteWorkspace */
export type DeleteWorkspacePayload = {
  __typename?: 'DeleteWorkspacePayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  workspaceId: Scalars['ID'];
};

/** Autogenerated input type of DeleteZenhubEpic */
export type DeleteZenhubEpicInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']>;
  zenhubEpicId: Scalars['ID'];
};

/** Autogenerated return type of DeleteZenhubEpic */
export type DeleteZenhubEpicPayload = {
  __typename?: 'DeleteZenhubEpicPayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  zenhubEpicId: Scalars['ID'];
};

/** Autogenerated input type of DeleteZenhubUser */
export type DeleteZenhubUserInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']>;
};

/** Autogenerated return type of DeleteZenhubUser */
export type DeleteZenhubUserPayload = {
  __typename?: 'DeleteZenhubUserPayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  zenhubUserId: Scalars['ID'];
};

/** Autogenerated input type of DisconnectWorkspaceRepository */
export type DisconnectWorkspaceRepositoryInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']>;
  repositoryGhId: Scalars['Int'];
  workspaceId: Scalars['ID'];
};

/** Autogenerated return type of DisconnectWorkspaceRepository */
export type DisconnectWorkspaceRepositoryPayload = {
  __typename?: 'DisconnectWorkspaceRepositoryPayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  workspace: Workspace;
};

export enum DisplayFilter {
  /** Includes Issues and PRs */
  All = 'all',
  /** Includes only Issues */
  Issues = 'issues',
  /** Includes only PRs */
  Prs = 'prs'
}

/** Input properties needed to send email notifications */
export type EmailPropertiesInput = {
  recipients: Array<Scalars['String']>;
  /** optional argument when email requires workspace info */
  workspaceId?: InputMaybe<Scalars['ID']>;
};

export type Epic = IssueProgress & Node & Timestamps & ViewerPermission & {
  __typename?: 'Epic';
  childIssues: IssueConnection;
  createdAt: Scalars['ISO8601DateTime'];
  endOn?: Maybe<Scalars['ISO8601Date']>;
  id: Scalars['ID'];
  issue: Issue;
  issueCountProgress?: Maybe<IssueCountProgress>;
  issueEstimateProgress?: Maybe<IssueEstimateProgress>;
  project?: Maybe<Project>;
  startOn?: Maybe<Scalars['ISO8601Date']>;
  updatedAt: Scalars['ISO8601DateTime'];
  viewerPermission: PermissionLevel;
};


export type EpicChildIssuesArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  filters?: InputMaybe<IssueFiltersInput>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
};

/** Filter issue search results */
export type EpicAssignableIssueSearchFiltersInput = {
  pipelineIds: Array<Scalars['ID']>;
  repositoryIds: Array<Scalars['ID']>;
};

/** The connection type for Epic. */
export type EpicConnection = {
  __typename?: 'EpicConnection';
  /** A list of edges. */
  edges: Array<EpicEdge>;
  /** A list of nodes. */
  nodes: Array<Epic>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  totalCount: Scalars['Int'];
};

/** An edge in a connection. */
export type EpicEdge = {
  __typename?: 'EpicEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
  /** The item at the end of the edge. */
  node: Epic;
};

export type EpicInput = {
  issue: IssueInput;
};

export enum EpicOrderField {
  CreatedAt = 'CREATED_AT',
  Title = 'TITLE'
}

/** Order of Epic connection */
export type EpicOrderInput = {
  direction?: InputMaybe<OrderDirection>;
  field?: InputMaybe<EpicOrderField>;
};

/** Filter issues by special epic filters */
export type EpicSearchFiltersInput = {
  id?: InputMaybe<IdInput>;
  specialFilters?: InputMaybe<EpicSpecialFilter>;
};

export enum EpicSpecialFilter {
  /** Show all epics and hide subtasks */
  EpicsOnly = 'epics_only',
  /** Show all epics and subtasks */
  EpicsWithSubtasks = 'epics_with_subtasks',
  /** Hide epics */
  NoEpics = 'no_epics',
  /** Show all issues not in an epic */
  NotInEpic = 'not_in_epic'
}

export type Estimate = Timestamps & {
  __typename?: 'Estimate';
  createdAt: Scalars['ISO8601DateTime'];
  updatedAt: Scalars['ISO8601DateTime'];
  value: Scalars['Float'];
};

/** Filter issues by special estimate filters */
export type EstimateSearchFiltersInput = {
  specialFilters?: InputMaybe<EstimateSpecialFilter>;
  values?: InputMaybe<FloatInput>;
};

export type EstimateSet = {
  __typename?: 'EstimateSet';
  repository: Repository;
  values: Array<Scalars['Float']>;
};

export enum EstimateSpecialFilter {
  /** Issues assigned for voting */
  AssignedForVoting = 'assigned_for_voting',
  /** Issues assigned to user for voting */
  AssignedToUserForVoting = 'assigned_to_user_for_voting'
}

export type EstimationGroup = {
  __typename?: 'EstimationGroup';
  id: Scalars['ID'];
  inviter: ZenhubUser;
  participants: ZenhubUserConnection;
  workspace: Workspace;
};


export type EstimationGroupParticipantsArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  issueIds: Array<Scalars['ID']>;
  last?: InputMaybe<Scalars['Int']>;
};

/** The connection type for EstimationGroup. */
export type EstimationGroupConnection = {
  __typename?: 'EstimationGroupConnection';
  /** A list of edges. */
  edges: Array<EstimationGroupEdge>;
  /** A list of nodes. */
  nodes: Array<EstimationGroup>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  totalCount: Scalars['Int'];
};

/** An edge in a connection. */
export type EstimationGroupEdge = {
  __typename?: 'EstimationGroupEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
  /** The item at the end of the edge. */
  node: EstimationGroup;
};

export type EstimationVote = Timestamps & {
  __typename?: 'EstimationVote';
  createdAt: Scalars['ISO8601DateTime'];
  id: Scalars['ID'];
  issue: Issue;
  updatedAt: Scalars['ISO8601DateTime'];
  value?: Maybe<Scalars['Float']>;
  voter: ZenhubUser;
};

/** The connection type for EstimationVote. */
export type EstimationVoteConnection = {
  __typename?: 'EstimationVoteConnection';
  /** A list of edges. */
  edges: Array<EstimationVoteEdge>;
  /** A list of nodes. */
  nodes: Array<EstimationVote>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  totalCount: Scalars['Int'];
};

/** An edge in a connection. */
export type EstimationVoteEdge = {
  __typename?: 'EstimationVoteEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
  /** The item at the end of the edge. */
  node: EstimationVote;
};

/** Filter a String column */
export type FloatInput = {
  in?: InputMaybe<Array<Scalars['Float']>>;
  nin?: InputMaybe<Array<Scalars['Float']>>;
  notInAny?: InputMaybe<Scalars['Boolean']>;
};

/** A reference to a GitHub project via Github repository node id and repository id */
export type GithubProjectInput = {
  githubProjectId: Scalars['String'];
  githubProjectRepoGhId: Scalars['Int'];
};

export type GithubTimestamps = {
  ghCreatedAt: Scalars['ISO8601DateTime'];
  ghUpdatedAt: Scalars['ISO8601DateTime'];
};

/** Filter an ID column */
export type IdInput = {
  in?: InputMaybe<Array<Scalars['ID']>>;
  nin?: InputMaybe<Array<Scalars['ID']>>;
  notInAny?: InputMaybe<Scalars['Boolean']>;
};

/** Autogenerated input type of InviteToEstimate */
export type InviteToEstimateInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']>;
  issueIds: Array<Scalars['ID']>;
  message?: InputMaybe<Scalars['String']>;
  workspaceId?: InputMaybe<Scalars['ID']>;
  zenhubUserIds: Array<Scalars['ID']>;
};

/** Autogenerated return type of InviteToEstimate */
export type InviteToEstimatePayload = {
  __typename?: 'InviteToEstimatePayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  estimationVotes: Array<EstimationVote>;
};

export type Issue = GithubTimestamps & Node & Timestamps & ViewerPermission & {
  __typename?: 'Issue';
  assignees: UserConnection;
  /** Issues that are blocked by this Issue. */
  blockedIssues: IssueConnection;
  /** Dependent items that are blocked by this issue */
  blockedItems: IssueDependencyItemConnection;
  /** Issues that are blocking this Issue. */
  blockingIssues: IssueConnection;
  /** Dependent items that are blocking this issue */
  blockingItems: IssueDependencyItemConnection;
  body?: Maybe<Scalars['String']>;
  closedAt?: Maybe<Scalars['ISO8601DateTime']>;
  /** 1st step connections of the PR. Only available for PRs */
  connections: IssueConnection;
  createdAt: Scalars['ISO8601DateTime'];
  /** @deprecated This field must not be used. */
  epic?: Maybe<Epic>;
  estimate?: Maybe<Estimate>;
  estimationVotes: EstimationVoteConnection;
  ghCreatedAt: Scalars['ISO8601DateTime'];
  ghId?: Maybe<Scalars['Int']>;
  ghNodeId?: Maybe<Scalars['ID']>;
  ghUpdatedAt: Scalars['ISO8601DateTime'];
  htmlUrl: Scalars['String'];
  id: Scalars['ID'];
  labels: LabelConnection;
  number: Scalars['Int'];
  /** @deprecated This field must not be used. Use parentZenhubEpics. */
  parentEpics: EpicConnection;
  parentZenhubEpics: ZenhubEpicConnection;
  pipelineIssue?: Maybe<PipelineIssue>;
  pipelineIssues: PipelineIssueConnection;
  pullRequest: Scalars['Boolean'];
  pullRequestObject?: Maybe<PullRequest>;
  pullRequestReviews?: Maybe<PullRequestReviewConnection>;
  releases: ReleaseConnection;
  repository: Repository;
  reviewRequests?: Maybe<ReviewRequestConnection>;
  sprints: SprintConnection;
  state: IssueState;
  timelineItems: TimelineItemConnection;
  title: Scalars['String'];
  updatedAt: Scalars['ISO8601DateTime'];
  /** User is only available for GitHub Issues */
  user: Owner;
  viewerPermission: PermissionLevel;
};


export type IssueAssigneesArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
};


export type IssueBlockedIssuesArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  filters?: InputMaybe<IssueFiltersInput>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
};


export type IssueBlockedItemsArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  filters?: InputMaybe<IssueDependencyItemFiltersInput>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
};


export type IssueBlockingIssuesArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  filters?: InputMaybe<IssueFiltersInput>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
};


export type IssueBlockingItemsArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  filters?: InputMaybe<IssueDependencyItemFiltersInput>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
};


export type IssueConnectionsArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
};


export type IssueEstimationVotesArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
};


export type IssueLabelsArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
};


export type IssueParentEpicsArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
};


export type IssueParentZenhubEpicsArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
};


export type IssuePipelineIssueArgs = {
  workspaceId: Scalars['ID'];
};


export type IssuePipelineIssuesArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
};


export type IssuePullRequestReviewsArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
};


export type IssueReleasesArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
};


export type IssueReviewRequestsArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
};


export type IssueSprintsArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  workspaceId?: InputMaybe<Scalars['ID']>;
};


export type IssueTimelineItemsArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
};

/** The connection type for Issue. */
export type IssueConnection = {
  __typename?: 'IssueConnection';
  /** A list of edges. */
  edges: Array<IssueEdge>;
  /** A list of nodes. */
  nodes: Array<Issue>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  pipelineCounts: PipelineCounts;
  /** @deprecated Use common field pipelineCounts instead */
  splitCounts: Scalars['JSON'];
  /** @deprecated Use common field pipelineCounts instead */
  sumEstimates: Scalars['Float'];
  totalCount: Scalars['Int'];
};

export type IssueCountProgress = {
  __typename?: 'IssueCountProgress';
  closed: Scalars['Int'];
  open: Scalars['Int'];
  total: Scalars['Int'];
};

export type IssueDependency = Node & Timestamps & {
  __typename?: 'IssueDependency';
  blockedIssue: Issue;
  blockingIssue: Issue;
  createdAt: Scalars['ISO8601DateTime'];
  id: Scalars['ID'];
  updatedAt: Scalars['ISO8601DateTime'];
};

/** The connection type for IssueDependency. */
export type IssueDependencyConnection = {
  __typename?: 'IssueDependencyConnection';
  /** A list of edges. */
  edges: Array<IssueDependencyEdge>;
  /** A list of nodes. */
  nodes: Array<IssueDependency>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  totalCount: Scalars['Int'];
};

/** An edge in a connection. */
export type IssueDependencyEdge = {
  __typename?: 'IssueDependencyEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
  /** The item at the end of the edge. */
  node: IssueDependency;
};

export type IssueDependencyItem = Issue | ZenhubEpic;

/** The connection type for IssueDependencyItem. */
export type IssueDependencyItemConnection = {
  __typename?: 'IssueDependencyItemConnection';
  /** A list of edges. */
  edges: Array<IssueDependencyItemEdge>;
  /** A list of nodes. */
  nodes: Array<IssueDependencyItem>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  totalCount: Scalars['Int'];
};

/** An edge in a connection. */
export type IssueDependencyItemEdge = {
  __typename?: 'IssueDependencyItemEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
  /** The item at the end of the edge. */
  node?: Maybe<IssueDependencyItem>;
};

/** Filter source/target fields in issue dependency */
export type IssueDependencyItemFiltersInput = {
  state?: InputMaybe<IssueDependencyItemStateInput>;
};

export enum IssueDependencyItemState {
  Closed = 'CLOSED',
  Open = 'OPEN'
}

/** Filter by IssueDependencyItemState */
export type IssueDependencyItemStateInput = {
  eq: IssueDependencyItemState;
};

/** An edge in a connection. */
export type IssueEdge = {
  __typename?: 'IssueEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
  /** The item at the end of the edge. */
  node: Issue;
};

export type IssueEstimateProgress = {
  __typename?: 'IssueEstimateProgress';
  closed: Scalars['Float'];
  open: Scalars['Float'];
  total: Scalars['Float'];
};

/** Filter Issues */
export type IssueFiltersInput = {
  repositoryId?: InputMaybe<IdInput>;
  state?: InputMaybe<IssueStateInput>;
};

export type IssueFlowStats = {
  __typename?: 'IssueFlowStats';
  anomalies?: Maybe<Array<AnomalousIssue>>;
  avgCycleDays?: Maybe<Scalars['Int']>;
  inDevelopmentDays?: Maybe<Scalars['Int']>;
  inReviewDays?: Maybe<Scalars['Int']>;
};

/** A reference to an issue via repository and issue number */
export type IssueInfoInput = {
  issueNumber: Scalars['Int'];
  repositoryGhId?: InputMaybe<Scalars['Int']>;
  repositoryId?: InputMaybe<Scalars['ID']>;
};

export type IssueInput = {
  assignees?: InputMaybe<Array<Scalars['String']>>;
  body?: InputMaybe<Scalars['String']>;
  labels?: InputMaybe<Array<Scalars['String']>>;
  repositoryGhId?: InputMaybe<Scalars['Int']>;
  repositoryId?: InputMaybe<Scalars['ID']>;
  title: Scalars['String'];
};

export enum IssueOrderField {
  /** Order by assignee logins */
  Assignees = 'assignees',
  /** Order by issue created_at */
  CreatedAt = 'created_at',
  /** Order by sprint dates */
  Sprints = 'sprints',
  /** Order by issue title */
  Title = 'title'
}

/** Sort issue search results */
export type IssueOrderInput = {
  direction: OrderDirection;
  field: IssueOrderField;
};

export type IssueProgress = {
  issueCountProgress?: Maybe<IssueCountProgress>;
  issueEstimateProgress?: Maybe<IssueEstimateProgress>;
};

/** Filter issue search results */
export type IssueSearchFiltersInput = {
  assignees?: InputMaybe<StringInput>;
  displayType?: InputMaybe<DisplayFilter>;
  estimates?: InputMaybe<EstimateSearchFiltersInput>;
  labels?: InputMaybe<StringInput>;
  matchType?: InputMaybe<MatchingFilter>;
  releases?: InputMaybe<IdInput>;
  repositoryIds?: InputMaybe<Array<Scalars['ID']>>;
  sprints?: InputMaybe<IdInput>;
  users?: InputMaybe<StringInput>;
  zenhubEpics?: InputMaybe<ZenhubEpicSearchFiltersInput>;
};

export enum IssueState {
  Closed = 'CLOSED',
  Open = 'OPEN'
}

/** Filter by IssueState */
export type IssueStateInput = {
  eq: IssueState;
};

export type IssueTemplate = {
  __typename?: 'IssueTemplate';
  body: Scalars['String'];
  default: Scalars['Boolean'];
  id: Scalars['ID'];
  metadata?: Maybe<Scalars['JSON']>;
  path: Scalars['String'];
  raw: Scalars['String'];
  repository: Repository;
};

/** The connection type for IssueTemplate. */
export type IssueTemplateConnection = {
  __typename?: 'IssueTemplateConnection';
  /** A list of edges. */
  edges: Array<IssueTemplateEdge>;
  /** A list of nodes. */
  nodes: Array<IssueTemplate>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  totalCount: Scalars['Int'];
};

/** An edge in a connection. */
export type IssueTemplateEdge = {
  __typename?: 'IssueTemplateEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
  /** The item at the end of the edge. */
  node: IssueTemplate;
};

export type Label = Timestamps & {
  __typename?: 'Label';
  color?: Maybe<Scalars['String']>;
  createdAt: Scalars['ISO8601DateTime'];
  description?: Maybe<Scalars['String']>;
  ghId: Scalars['BigInt'];
  ghNodeId: Scalars['ID'];
  id: Scalars['ID'];
  issues: IssueConnection;
  name: Scalars['String'];
  repository: Repository;
  updatedAt: Scalars['ISO8601DateTime'];
};


export type LabelIssuesArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
};

/** The connection type for Label. */
export type LabelConnection = {
  __typename?: 'LabelConnection';
  /** A list of edges. */
  edges: Array<LabelEdge>;
  /** A list of nodes. */
  nodes: Array<Label>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  totalCount: Scalars['Int'];
};

/** An edge in a connection. */
export type LabelEdge = {
  __typename?: 'LabelEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
  /** The item at the end of the edge. */
  node: Label;
};

/** Autogenerated input type of LeaveZenhubOrganization */
export type LeaveZenhubOrganizationInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']>;
  zenhubOrganizationId: Scalars['ID'];
};

/** Autogenerated return type of LeaveZenhubOrganization */
export type LeaveZenhubOrganizationPayload = {
  __typename?: 'LeaveZenhubOrganizationPayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  zenhubOrganization: ZenhubOrganization;
};

export type Mannequin = Owner & Timestamps & {
  __typename?: 'Mannequin';
  avatarUrl: Scalars['String'];
  createdAt: Scalars['ISO8601DateTime'];
  ghId?: Maybe<Scalars['Int']>;
  hasWorkspace: Scalars['Boolean'];
  id: Scalars['ID'];
  login: Scalars['String'];
  projects: ProjectConnection;
  repositoryFavorites: RepositoryFavoriteConnection;
  roadmapItems: RoadmapItemConnection;
  searchWorkspaces: WorkspaceSearchMatchConnection;
  type: Scalars['String'];
  updatedAt: Scalars['ISO8601DateTime'];
  workspaceFavorites: WorkspaceFavoriteConnection;
};


export type MannequinProjectsArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
};


export type MannequinRepositoryFavoritesArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
};


export type MannequinRoadmapItemsArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
};


export type MannequinSearchWorkspacesArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  query: Scalars['String'];
  repositoryGhIds?: InputMaybe<Array<Scalars['Int']>>;
};


export type MannequinWorkspaceFavoritesArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
};

export enum MatchingFilter {
  /** Include records that match all filters */
  All = 'all',
  /** Include records that match any filters */
  Any = 'any'
}

/** Autogenerated input type of MoveAllPipelineIssues */
export type MoveAllPipelineIssuesInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']>;
  destinationPipelineId: Scalars['ID'];
  pipelineIds: Array<Scalars['ID']>;
};

/** Autogenerated return type of MoveAllPipelineIssues */
export type MoveAllPipelineIssuesPayload = {
  __typename?: 'MoveAllPipelineIssuesPayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  workspace: Workspace;
};

/** Autogenerated input type of MoveIssue */
export type MoveIssueInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']>;
  issueId: Scalars['ID'];
  pipelineId: Scalars['ID'];
  position?: InputMaybe<Scalars['Int']>;
};

/** Autogenerated return type of MoveIssue */
export type MoveIssuePayload = {
  __typename?: 'MoveIssuePayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  issue: Issue;
  pipeline: Pipeline;
};

/** Autogenerated input type of MoveIssueRelativeTo */
export type MoveIssueRelativeToInput = {
  afterPipelineIssueId?: InputMaybe<Scalars['ID']>;
  beforePipelineIssueId?: InputMaybe<Scalars['ID']>;
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']>;
  issueId: Scalars['ID'];
  pipelineId?: InputMaybe<Scalars['ID']>;
  position?: InputMaybe<PipelineIssuePosition>;
};

/** Autogenerated return type of MoveIssueRelativeTo */
export type MoveIssueRelativeToPayload = {
  __typename?: 'MoveIssueRelativeToPayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  pipelineIssueMove: PipelineIssueMove;
};

/** Autogenerated input type of MovePipelineIssues */
export type MovePipelineIssuesInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']>;
  pipelineId: Scalars['ID'];
  pipelineIssueIds: Array<Scalars['ID']>;
  position: PipelineIssuePosition;
};

/** Autogenerated return type of MovePipelineIssues */
export type MovePipelineIssuesPayload = {
  __typename?: 'MovePipelineIssuesPayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  pipeline: Pipeline;
  pipelineIssues: Array<PipelineIssue>;
};

/** Autogenerated input type of MoveRoadmapItemRelativeTo */
export type MoveRoadmapItemRelativeToInput = {
  afterItemId?: InputMaybe<Scalars['ID']>;
  beforeItemId?: InputMaybe<Scalars['ID']>;
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']>;
  itemId: Scalars['ID'];
  roadmapId: Scalars['ID'];
};

/** Autogenerated return type of MoveRoadmapItemRelativeTo */
export type MoveRoadmapItemRelativeToPayload = {
  __typename?: 'MoveRoadmapItemRelativeToPayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  item: RoadmapItem;
};

export type Mutation = {
  __typename?: 'Mutation';
  /** Accept ZenhubOrganization invite */
  acceptZenhubOrganizationInvite?: Maybe<AcceptZenhubOrganizationInvitePayload>;
  /** Add assignees to multiple Issues */
  addAssigneesToIssues?: Maybe<AddAssigneesToIssuesPayload>;
  /** Add assignees to multiple zenhub_epics */
  addAssigneesToZenhubEpics?: Maybe<AddAssigneesToZenhubEpicsPayload>;
  /**
   * Add Epics to a Project
   * @deprecated This mutation must not be used. Use addZenhubEpicsToProject.
   */
  addEpicsToProject?: Maybe<AddEpicsToProjectPayload>;
  /**
   * Add Epics to a Roadmap
   * @deprecated This mutation must not be used. Use addZenhubEpicsToRoadmap.
   */
  addEpicsToRoadmap?: Maybe<AddEpicsToRoadmapPayload>;
  /** Add a value to an EstimateSet */
  addEstimateSetValue?: Maybe<AddEstimateSetValuePayload>;
  /**
   * Adds Issues to Epics
   * @deprecated This mutation must not be used. Use addIssuesToZenhubEpics.
   */
  addIssuesToEpics?: Maybe<AddIssuesToEpicsPayload>;
  /** Add Issues to Releases */
  addIssuesToReleases?: Maybe<AddIssuesToReleasesPayload>;
  /** Add Issues to Sprints */
  addIssuesToSprints?: Maybe<AddIssuesToSprintsPayload>;
  /** Adds Issues to Zenhub Epics */
  addIssuesToZenhubEpics?: Maybe<AddIssuesToZenhubEpicsPayload>;
  /** Add labels to multiple Issues */
  addLabelsToIssues?: Maybe<AddLabelsToIssuesPayload>;
  /** Add Projects to a Roadmap */
  addProjectsToRoadmap?: Maybe<AddProjectsToRoadmapPayload>;
  /** Add repositories to a release */
  addRepositoriesToRelease?: Maybe<AddRepositoriesToReleasePayload>;
  /** Add a Repository to a Workspace */
  addRepositoryToWorkspace?: Maybe<AddRepositoryToWorkspacePayload>;
  /** Add label filters to a Workspace */
  addWorkspaceLabelFilters?: Maybe<AddWorkspaceLabelFiltersPayload>;
  /** Add Zenhub Epics to a Project */
  addZenhubEpicsToProject?: Maybe<AddZenhubEpicsToProjectPayload>;
  /** Add Zenhub epics to a Roadmap */
  addZenhubEpicsToRoadmap?: Maybe<AddZenhubEpicsToRoadmapPayload>;
  /** Add zenhub labels to multiple zenhub epics */
  addZenhubLabelsToZenhubEpics?: Maybe<AddZenhubLabelsToZenhubEpicsPayload>;
  /** Closes multiple issues at once */
  closeIssues?: Maybe<CloseIssuesPayload>;
  /**
   * Creates an Epic
   * @deprecated This mutation must not be used. Use createZenhubEpic.
   */
  createEpic?: Maybe<CreateEpicPayload>;
  /**
   * Convert issue to an epic and add issues to it
   * @deprecated This mutation must not be used. Use createZenhubEpic.
   */
  createEpicFromIssue?: Maybe<CreateEpicFromIssuePayload>;
  /**
   * Create an Epic on a Project
   * @deprecated This mutation must not be used. Use createZenhubEpicOnProject.
   */
  createEpicOnProject?: Maybe<CreateEpicOnProjectPayload>;
  /**
   * Create an Epic on a Roadmap
   * @deprecated This mutation must not be used. Use createZenhubEpicOnRoadmap.
   */
  createEpicOnRoadmap?: Maybe<CreateEpicOnRoadmapPayload>;
  /** Creates an Issue */
  createIssue?: Maybe<CreateIssuePayload>;
  /**
   * Creates a Dependency between two issues
   * @deprecated Use createBlockage instead
   */
  createIssueDependency?: Maybe<CreateIssueDependencyPayload>;
  /** Creates Issue<->PR Connection */
  createIssuePrConnection?: Maybe<CreateIssuePrConnectionPayload>;
  /** Create a new Pipeline */
  createPipeline?: Maybe<CreatePipelinePayload>;
  /** Create a new PipelineToPipelineAutomation */
  createPipelineToPipelineAutomation?: Maybe<CreatePipelineToPipelineAutomationPayload>;
  /** Create a Project on a Roadmap */
  createProjectOnRoadmap?: Maybe<CreateProjectOnRoadmapPayload>;
  /** Create a release */
  createRelease?: Maybe<CreateReleasePayload>;
  /** Creates a SprintConfig for a workspace */
  createSprintConfig?: Maybe<CreateSprintConfigPayload>;
  /** Create a Workspace */
  createWorkspace?: Maybe<CreateWorkspacePayload>;
  /** Create a Zenhub epic */
  createZenhubEpic?: Maybe<CreateZenhubEpicPayload>;
  /** Create a Zenhub Epic on a Project */
  createZenhubEpicOnProject?: Maybe<CreateZenhubEpicOnProjectPayload>;
  /** Create a Zenhub epic on a Roadmap */
  createZenhubEpicOnRoadmap?: Maybe<CreateZenhubEpicOnRoadmapPayload>;
  /** Create a Zenhub Organization */
  createZenhubOrganization?: Maybe<CreateZenhubOrganizationPayload>;
  /** Create ZenhubOrganization invite */
  createZenhubOrganizationInvite?: Maybe<CreateZenhubOrganizationInvitePayload>;
  /**
   * Destroy epic and its dependents
   * @deprecated This mutation must not be used. Use deleteZenhubEpic.
   */
  deleteEpicByIssueInfo?: Maybe<DeleteEpicByIssueInfoPayload>;
  /**
   * Delete a Dependency between two issues
   * @deprecated Use deleteBlockage instead
   */
  deleteIssueDependency?: Maybe<DeleteIssueDependencyPayload>;
  /** Deletes Issue<->PR Connection */
  deleteIssuePrConnection?: Maybe<DeleteIssuePrConnectionPayload>;
  /** Delete a Pipeline */
  deletePipeline?: Maybe<DeletePipelinePayload>;
  /** Delete a PipelineToPipelineAutomation */
  deletePipelineToPipelineAutomation?: Maybe<DeletePipelineToPipelineAutomationPayload>;
  /** Delete a Project */
  deleteProject?: Maybe<DeleteProjectPayload>;
  /** Delete a SprintConfig and open Sprints for a workspace */
  deleteSprintConfigAndOpenSprints?: Maybe<DeleteSprintConfigAndOpenSprintsPayload>;
  /** Deletes a Workspace */
  deleteWorkspace?: Maybe<DeleteWorkspacePayload>;
  /** Deletes a workspace favorite */
  deleteWorkspaceFavorite?: Maybe<DeleteWorkspaceFavoritePayload>;
  /** Delete zenhub epic */
  deleteZenhubEpic?: Maybe<DeleteZenhubEpicPayload>;
  /** Delete Zenhub user */
  deleteZenhubUser?: Maybe<DeleteZenhubUserPayload>;
  /** Disconnects a repository from a Workspace */
  disconnectWorkspaceRepository?: Maybe<DisconnectWorkspaceRepositoryPayload>;
  /** Invite a list of users to estimate a list of issues. Errors on PR */
  inviteToEstimate?: Maybe<InviteToEstimatePayload>;
  /** Leave zenhub organization */
  leaveZenhubOrganization?: Maybe<LeaveZenhubOrganizationPayload>;
  /** Move all pipeline issues from source pipelines to a destination pipeline */
  moveAllPipelineIssues?: Maybe<MoveAllPipelineIssuesPayload>;
  /** Move issues to a position in a pipeline */
  moveIssue?: Maybe<MoveIssuePayload>;
  /** Move Issue after/before a PipelineIssue or to start/end */
  moveIssueRelativeTo?: Maybe<MoveIssueRelativeToPayload>;
  /** Move PipelineIssues to either top or bottom */
  movePipelineIssues?: Maybe<MovePipelineIssuesPayload>;
  /** Move roadmap items relative to each other */
  moveRoadmapItemRelativeTo?: Maybe<MoveRoadmapItemRelativeToPayload>;
  /** Remove assignees from multiple Issues */
  removeAssigneesFromIssues?: Maybe<RemoveAssigneesFromIssuesPayload>;
  /** Remove assignees fromto multiple zenhub_epics */
  removeAssigneesFromZenhubEpics?: Maybe<RemoveAssigneesFromZenhubEpicsPayload>;
  /**
   * Removes an Epic from a Project
   * @deprecated This mutation must not be used. Use removeZenhubEpicsFromProject.
   */
  removeEpicFromProject?: Maybe<RemoveEpicFromProjectPayload>;
  /**
   * Removes an Epic from a Roadmap
   * @deprecated This mutation must not be used. Use removeZenhubEpicsFromRoadmap.
   */
  removeEpicFromRoadmap?: Maybe<RemoveEpicFromRoadmapPayload>;
  /** Remove a value from an EstimateSet */
  removeEstimateSetValue?: Maybe<RemoveEstimateSetValuePayload>;
  /** Remove a vote on issue estimation */
  removeEstimationVote?: Maybe<RemoveEstimationVotePayload>;
  /** Removes multiple issue priorities */
  removeIssueInfoPriorities?: Maybe<RemoveIssueInfoPrioritiesPayload>;
  /**
   * Remove Issues from Epics
   * @deprecated This mutation must not be used. Use removeissuesFromZenhubEpics.
   */
  removeIssuesFromEpics?: Maybe<RemoveIssuesFromEpicsPayload>;
  /** Remove Issues from Releases */
  removeIssuesFromReleases?: Maybe<RemoveIssuesFromReleasesPayload>;
  /** Remove Issues from Sprints */
  removeIssuesFromSprints?: Maybe<RemoveIssuesFromSprintsPayload>;
  /** Remove Issues from Zenhub Epics */
  removeIssuesFromZenhubEpics?: Maybe<RemoveIssuesFromZenhubEpicsPayload>;
  /** Remove labels from multiple Issues */
  removeLabelsFromIssues?: Maybe<RemoveLabelsFromIssuesPayload>;
  /** Remove a Project from a Roadmap */
  removeProjectFromRoadmap?: Maybe<RemoveProjectFromRoadmapPayload>;
  /** Remove repositories from a release */
  removeRepositoriesFromRelease?: Maybe<RemoveRepositoriesFromReleasePayload>;
  /** Remove user from zenhub organization */
  removeUserFromZenhubOrganization?: Maybe<RemoveUserFromZenhubOrganizationPayload>;
  /** Removes label filters from a Workspace */
  removeWorkspaceLabelFilters?: Maybe<RemoveWorkspaceLabelFiltersPayload>;
  /** Removes a Zenhub Epic from a Project */
  removeZenhubEpicFromProject?: Maybe<RemoveZenhubEpicFromProjectPayload>;
  /** Remove Zenhub epic from a Roadmap */
  removeZenhubEpicFromRoadmap?: Maybe<RemoveZenhubEpicFromRoadmapPayload>;
  /** Remove zenhub labels from multiple zenhub epics */
  removeZenhubLabelsFromZenhubEpics?: Maybe<RemoveZenhubLabelsFromZenhubEpicsPayload>;
  /** Reopen Issues into a Pipeline either at the start or end */
  reopenIssues?: Maybe<ReopenIssuesPayload>;
  /** Set an estimate on an Issue */
  setEstimate?: Maybe<SetEstimatePayload>;
  /** Give a vote on issue estimation */
  setEstimationVote?: Maybe<SetEstimationVotePayload>;
  /** Sets a workspace as favorite */
  setFavoriteWorkspace?: Maybe<SetFavoriteWorkspacePayload>;
  /** Sets multiple issue priorities */
  setIssueInfoPriorities?: Maybe<SetIssueInfoPrioritiesPayload>;
  /** Set estimates on multiple Issues */
  setMultipleEstimates?: Maybe<SetMultipleEstimatesPayload>;
  /** Set an estimate on ZenhubEpics */
  setMultipleEstimatesOnZenhubEpics?: Maybe<SetMultipleEstimatesOnZenhubEpicsPayload>;
  /** Set stages for pipelines */
  setPipelineStages?: Maybe<SetPipelineStagesPayload>;
  /** Set priority on PipelineIssues */
  setPriorityOnPipelineIssues?: Maybe<SetPriorityOnPipelineIssuesPayload>;
  /** Sets a pull_request_pipeline_id for a workspace */
  setPullRequestPipeline?: Maybe<SetPullRequestPipelinePayload>;
  /** For a user, set Workspace's last viewed timestamp to now */
  setWorkspaceViewedNow?: Maybe<SetWorkspaceViewedNowPayload>;
  /** Splits a repository from a Workspace */
  splitWorkspaceRepository?: Maybe<SplitWorkspaceRepositoryPayload>;
  /**
   * Update epic's startOn and endOn dates
   * @deprecated This mutation must not be used. Use updateZenhubEpicDates.
   */
  updateEpicDates?: Maybe<UpdateEpicDatesPayload>;
  /**
   * Adds and Removes Issues from an Epic
   * @deprecated This mutation must not be used. Use updateZenhubEpic.
   */
  updateEpicIssuesByIssueInfos?: Maybe<UpdateEpicIssuesByIssueInfosPayload>;
  /** Update an existing Issue */
  updateIssue?: Maybe<UpdateIssuePayload>;
  /** Update a Pipeline */
  updatePipeline?: Maybe<UpdatePipelinePayload>;
  /** Update a Project */
  updateProject?: Maybe<UpdateProjectPayload>;
  /** Update Project's startOn and endOn dates */
  updateProjectDates?: Maybe<UpdateProjectDatesPayload>;
  /** Update a Project State */
  updateProjectState?: Maybe<UpdateProjectStatePayload>;
  /** Update a release */
  updateRelease?: Maybe<UpdateReleasePayload>;
  /** Update an existing Sprint */
  updateSprint?: Maybe<UpdateSprintPayload>;
  /** Updates a SprintConfig for a workspace */
  updateSprintConfig?: Maybe<UpdateSprintConfigPayload>;
  /** Update user permissions on organization */
  updateUserPermissions?: Maybe<UpdateUserPermissionsPayload>;
  /** Update a Workspace */
  updateWorkspace?: Maybe<UpdateWorkspacePayload>;
  /** Update Zenhub epic */
  updateZenhubEpic?: Maybe<UpdateZenhubEpicPayload>;
  /** Update Zenhub epic's startOn and endOn dates */
  updateZenhubEpicDates?: Maybe<UpdateZenhubEpicDatesPayload>;
  /** Update a ZenhubEpic State */
  updateZenhubEpicState?: Maybe<UpdateZenhubEpicStatePayload>;
  /** Update ZenhubOrganization */
  updateZenhubOrganization?: Maybe<UpdateZenhubOrganizationPayload>;
};


export type MutationAcceptZenhubOrganizationInviteArgs = {
  input: AcceptZenhubOrganizationInviteInput;
};


export type MutationAddAssigneesToIssuesArgs = {
  input: AddAssigneesToIssuesInput;
};


export type MutationAddAssigneesToZenhubEpicsArgs = {
  input: AddAssigneesToZenhubEpicsInput;
};


export type MutationAddEpicsToProjectArgs = {
  input: AddEpicsToProjectInput;
};


export type MutationAddEpicsToRoadmapArgs = {
  input: AddEpicsToRoadmapInput;
};


export type MutationAddEstimateSetValueArgs = {
  input: AddEstimateSetValueInput;
};


export type MutationAddIssuesToEpicsArgs = {
  input: AddIssuesToEpicsInput;
};


export type MutationAddIssuesToReleasesArgs = {
  input: AddIssuesToReleasesInput;
};


export type MutationAddIssuesToSprintsArgs = {
  input: AddIssuesToSprintsInput;
};


export type MutationAddIssuesToZenhubEpicsArgs = {
  input: AddIssuesToZenhubEpicsInput;
};


export type MutationAddLabelsToIssuesArgs = {
  input: AddLabelsToIssuesInput;
};


export type MutationAddProjectsToRoadmapArgs = {
  input: AddProjectsToRoadmapInput;
};


export type MutationAddRepositoriesToReleaseArgs = {
  input: AddRepositoriesToReleaseInput;
};


export type MutationAddRepositoryToWorkspaceArgs = {
  input: AddRepositoryToWorkspaceInput;
};


export type MutationAddWorkspaceLabelFiltersArgs = {
  input: AddWorkspaceLabelFiltersInput;
};


export type MutationAddZenhubEpicsToProjectArgs = {
  input: AddZenhubEpicsToProjectInput;
};


export type MutationAddZenhubEpicsToRoadmapArgs = {
  input: AddZenhubEpicsToRoadmapInput;
};


export type MutationAddZenhubLabelsToZenhubEpicsArgs = {
  input: AddZenhubLabelsToZenhubEpicsInput;
};


export type MutationCloseIssuesArgs = {
  input: CloseIssuesInput;
};


export type MutationCreateEpicArgs = {
  input: CreateEpicInput;
};


export type MutationCreateEpicFromIssueArgs = {
  input: CreateEpicFromIssueInput;
};


export type MutationCreateEpicOnProjectArgs = {
  input: CreateEpicOnProjectInput;
};


export type MutationCreateEpicOnRoadmapArgs = {
  input: CreateEpicOnRoadmapInput;
};


export type MutationCreateIssueArgs = {
  input: CreateIssueInput;
};


export type MutationCreateIssueDependencyArgs = {
  input: CreateIssueDependencyInput;
};


export type MutationCreateIssuePrConnectionArgs = {
  input: CreateIssuePrConnectionInput;
};


export type MutationCreatePipelineArgs = {
  input: CreatePipelineInput;
};


export type MutationCreatePipelineToPipelineAutomationArgs = {
  input: CreatePipelineToPipelineAutomationInput;
};


export type MutationCreateProjectOnRoadmapArgs = {
  input: CreateProjectOnRoadmapInput;
};


export type MutationCreateReleaseArgs = {
  input: CreateReleaseInput;
};


export type MutationCreateSprintConfigArgs = {
  input: CreateSprintConfigInput;
};


export type MutationCreateWorkspaceArgs = {
  input: CreateWorkspaceInput;
};


export type MutationCreateZenhubEpicArgs = {
  input: CreateZenhubEpicInput;
};


export type MutationCreateZenhubEpicOnProjectArgs = {
  input: CreateZenhubEpicOnProjectInput;
};


export type MutationCreateZenhubEpicOnRoadmapArgs = {
  input: CreateZenhubEpicOnRoadmapInput;
};


export type MutationCreateZenhubOrganizationArgs = {
  input: CreateZenhubOrganizationInput;
};


export type MutationCreateZenhubOrganizationInviteArgs = {
  input: CreateZenhubOrganizationInviteInput;
};


export type MutationDeleteEpicByIssueInfoArgs = {
  input: DeleteEpicByIssueInfoInput;
};


export type MutationDeleteIssueDependencyArgs = {
  input: DeleteIssueDependencyInput;
};


export type MutationDeleteIssuePrConnectionArgs = {
  input: DeleteIssuePrConnectionInput;
};


export type MutationDeletePipelineArgs = {
  input: DeletePipelineInput;
};


export type MutationDeletePipelineToPipelineAutomationArgs = {
  input: DeletePipelineToPipelineAutomationInput;
};


export type MutationDeleteProjectArgs = {
  input: DeleteProjectInput;
};


export type MutationDeleteSprintConfigAndOpenSprintsArgs = {
  input: DeleteSprintConfigAndOpenSprintsInput;
};


export type MutationDeleteWorkspaceArgs = {
  input: DeleteWorkspaceInput;
};


export type MutationDeleteWorkspaceFavoriteArgs = {
  input: DeleteWorkspaceFavoriteInput;
};


export type MutationDeleteZenhubEpicArgs = {
  input: DeleteZenhubEpicInput;
};


export type MutationDeleteZenhubUserArgs = {
  input: DeleteZenhubUserInput;
};


export type MutationDisconnectWorkspaceRepositoryArgs = {
  input: DisconnectWorkspaceRepositoryInput;
};


export type MutationInviteToEstimateArgs = {
  input: InviteToEstimateInput;
};


export type MutationLeaveZenhubOrganizationArgs = {
  input: LeaveZenhubOrganizationInput;
};


export type MutationMoveAllPipelineIssuesArgs = {
  input: MoveAllPipelineIssuesInput;
};


export type MutationMoveIssueArgs = {
  input: MoveIssueInput;
};


export type MutationMoveIssueRelativeToArgs = {
  input: MoveIssueRelativeToInput;
};


export type MutationMovePipelineIssuesArgs = {
  input: MovePipelineIssuesInput;
};


export type MutationMoveRoadmapItemRelativeToArgs = {
  input: MoveRoadmapItemRelativeToInput;
};


export type MutationRemoveAssigneesFromIssuesArgs = {
  input: RemoveAssigneesFromIssuesInput;
};


export type MutationRemoveAssigneesFromZenhubEpicsArgs = {
  input: RemoveAssigneesFromZenhubEpicsInput;
};


export type MutationRemoveEpicFromProjectArgs = {
  input: RemoveEpicFromProjectInput;
};


export type MutationRemoveEpicFromRoadmapArgs = {
  input: RemoveEpicFromRoadmapInput;
};


export type MutationRemoveEstimateSetValueArgs = {
  input: RemoveEstimateSetValueInput;
};


export type MutationRemoveEstimationVoteArgs = {
  input: RemoveEstimationVoteInput;
};


export type MutationRemoveIssueInfoPrioritiesArgs = {
  input: RemoveIssueInfoPrioritiesInput;
};


export type MutationRemoveIssuesFromEpicsArgs = {
  input: RemoveIssuesFromEpicsInput;
};


export type MutationRemoveIssuesFromReleasesArgs = {
  input: RemoveIssuesFromReleasesInput;
};


export type MutationRemoveIssuesFromSprintsArgs = {
  input: RemoveIssuesFromSprintsInput;
};


export type MutationRemoveIssuesFromZenhubEpicsArgs = {
  input: RemoveIssuesFromZenhubEpicsInput;
};


export type MutationRemoveLabelsFromIssuesArgs = {
  input: RemoveLabelsFromIssuesInput;
};


export type MutationRemoveProjectFromRoadmapArgs = {
  input: RemoveProjectFromRoadmapInput;
};


export type MutationRemoveRepositoriesFromReleaseArgs = {
  input: RemoveRepositoriesFromReleaseInput;
};


export type MutationRemoveUserFromZenhubOrganizationArgs = {
  input: RemoveUserFromZenhubOrganizationInput;
};


export type MutationRemoveWorkspaceLabelFiltersArgs = {
  input: RemoveWorkspaceLabelFiltersInput;
};


export type MutationRemoveZenhubEpicFromProjectArgs = {
  input: RemoveZenhubEpicFromProjectInput;
};


export type MutationRemoveZenhubEpicFromRoadmapArgs = {
  input: RemoveZenhubEpicFromRoadmapInput;
};


export type MutationRemoveZenhubLabelsFromZenhubEpicsArgs = {
  input: RemoveZenhubLabelsFromZenhubEpicsInput;
};


export type MutationReopenIssuesArgs = {
  input: ReopenIssuesInput;
};


export type MutationSetEstimateArgs = {
  input: SetEstimateInput;
};


export type MutationSetEstimationVoteArgs = {
  input: SetEstimationVoteInput;
};


export type MutationSetFavoriteWorkspaceArgs = {
  input: SetFavoriteWorkspaceInput;
};


export type MutationSetIssueInfoPrioritiesArgs = {
  input: SetIssueInfoPrioritiesInput;
};


export type MutationSetMultipleEstimatesArgs = {
  input: SetMultipleEstimatesInput;
};


export type MutationSetMultipleEstimatesOnZenhubEpicsArgs = {
  input: SetMultipleEstimatesOnZenhubEpicsInput;
};


export type MutationSetPipelineStagesArgs = {
  input: SetPipelineStagesInput;
};


export type MutationSetPriorityOnPipelineIssuesArgs = {
  input: SetPriorityOnPipelineIssuesInput;
};


export type MutationSetPullRequestPipelineArgs = {
  input: SetPullRequestPipelineInput;
};


export type MutationSetWorkspaceViewedNowArgs = {
  input: SetWorkspaceViewedNowInput;
};


export type MutationSplitWorkspaceRepositoryArgs = {
  input: SplitWorkspaceRepositoryInput;
};


export type MutationUpdateEpicDatesArgs = {
  input: UpdateEpicDatesInput;
};


export type MutationUpdateEpicIssuesByIssueInfosArgs = {
  input: UpdateEpicIssuesByIssueInfosInput;
};


export type MutationUpdateIssueArgs = {
  input: UpdateIssueInput;
};


export type MutationUpdatePipelineArgs = {
  input: UpdatePipelineInput;
};


export type MutationUpdateProjectArgs = {
  input: UpdateProjectInput;
};


export type MutationUpdateProjectDatesArgs = {
  input: UpdateProjectDatesInput;
};


export type MutationUpdateProjectStateArgs = {
  input: UpdateProjectStateInput;
};


export type MutationUpdateReleaseArgs = {
  input: UpdateReleaseInput;
};


export type MutationUpdateSprintArgs = {
  input: UpdateSprintInput;
};


export type MutationUpdateSprintConfigArgs = {
  input: UpdateSprintConfigInput;
};


export type MutationUpdateUserPermissionsArgs = {
  input: UpdateUserPermissionsInput;
};


export type MutationUpdateWorkspaceArgs = {
  input: UpdateWorkspaceInput;
};


export type MutationUpdateZenhubEpicArgs = {
  input: UpdateZenhubEpicInput;
};


export type MutationUpdateZenhubEpicDatesArgs = {
  input: UpdateZenhubEpicDatesInput;
};


export type MutationUpdateZenhubEpicStateArgs = {
  input: UpdateZenhubEpicStateInput;
};


export type MutationUpdateZenhubOrganizationArgs = {
  input: UpdateZenhubOrganizationInput;
};

export type NoOwner = Owner & {
  __typename?: 'NoOwner';
  avatarUrl: Scalars['String'];
  createdAt: Scalars['ISO8601DateTime'];
  ghId?: Maybe<Scalars['Int']>;
  hasWorkspace: Scalars['Boolean'];
  id: Scalars['ID'];
  login: Scalars['String'];
  projects: ProjectConnection;
  repositoryFavorites: RepositoryFavoriteConnection;
  roadmapItems: RoadmapItemConnection;
  searchWorkspaces: WorkspaceSearchMatchConnection;
  type: Scalars['String'];
  updatedAt: Scalars['ISO8601DateTime'];
  workspaceFavorites: WorkspaceFavoriteConnection;
};


export type NoOwnerProjectsArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
};


export type NoOwnerRepositoryFavoritesArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
};


export type NoOwnerRoadmapItemsArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
};


export type NoOwnerSearchWorkspacesArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  query: Scalars['String'];
  repositoryGhIds?: InputMaybe<Array<Scalars['Int']>>;
};


export type NoOwnerWorkspaceFavoritesArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
};

/** An object with an ID. */
export type Node = {
  /** ID of the object. */
  id: Scalars['ID'];
};

export enum OrderDirection {
  Asc = 'ASC',
  Desc = 'DESC'
}

export type Organization = Owner & Timestamps & {
  __typename?: 'Organization';
  avatarUrl: Scalars['String'];
  createdAt: Scalars['ISO8601DateTime'];
  ghId?: Maybe<Scalars['Int']>;
  hasWorkspace: Scalars['Boolean'];
  id: Scalars['ID'];
  login: Scalars['String'];
  projects: ProjectConnection;
  repositoryFavorites: RepositoryFavoriteConnection;
  roadmapItems: RoadmapItemConnection;
  searchWorkspaces: WorkspaceSearchMatchConnection;
  type: Scalars['String'];
  updatedAt: Scalars['ISO8601DateTime'];
  workspaceFavorites: WorkspaceFavoriteConnection;
  zenhubOrganization?: Maybe<ZenhubOrganization>;
};


export type OrganizationProjectsArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
};


export type OrganizationRepositoryFavoritesArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
};


export type OrganizationRoadmapItemsArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
};


export type OrganizationSearchWorkspacesArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  query: Scalars['String'];
  repositoryGhIds?: InputMaybe<Array<Scalars['Int']>>;
};


export type OrganizationWorkspaceFavoritesArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
};

export type Owner = {
  avatarUrl: Scalars['String'];
  createdAt: Scalars['ISO8601DateTime'];
  ghId?: Maybe<Scalars['Int']>;
  hasWorkspace: Scalars['Boolean'];
  id: Scalars['ID'];
  login: Scalars['String'];
  projects: ProjectConnection;
  repositoryFavorites: RepositoryFavoriteConnection;
  roadmapItems: RoadmapItemConnection;
  searchWorkspaces: WorkspaceSearchMatchConnection;
  type: Scalars['String'];
  updatedAt: Scalars['ISO8601DateTime'];
  workspaceFavorites: WorkspaceFavoriteConnection;
};


export type OwnerProjectsArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
};


export type OwnerRepositoryFavoritesArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
};


export type OwnerRoadmapItemsArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
};


export type OwnerSearchWorkspacesArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  query: Scalars['String'];
  repositoryGhIds?: InputMaybe<Array<Scalars['Int']>>;
};


export type OwnerWorkspaceFavoritesArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
};

/** Information about pagination in a connection. */
export type PageInfo = {
  __typename?: 'PageInfo';
  /** When paginating forwards, the cursor to continue. */
  endCursor?: Maybe<Scalars['String']>;
  /** When paginating forwards, are there more items? */
  hasNextPage: Scalars['Boolean'];
  /** When paginating backwards, are there more items? */
  hasPreviousPage: Scalars['Boolean'];
  /** When paginating backwards, the cursor to continue. */
  startCursor?: Maybe<Scalars['String']>;
};

export enum PermissionLevel {
  Admin = 'ADMIN',
  None = 'NONE',
  Read = 'READ',
  Write = 'WRITE'
}

export type Pipeline = Node & Timestamps & {
  __typename?: 'Pipeline';
  createdAt: Scalars['ISO8601DateTime'];
  description?: Maybe<Scalars['String']>;
  hasEstimatedIssues: Scalars['Boolean'];
  id: Scalars['ID'];
  isDefaultPRPipeline: Scalars['Boolean'];
  /** @deprecated This field must not be used. */
  isEpicPipeline: Scalars['Boolean'];
  issues: IssueConnection;
  itemBefore?: Maybe<Pipeline>;
  name: Scalars['String'];
  pipelineToPipelineAutomationDestinations: PipelineToPipelineAutomationConnection;
  pipelineToPipelineAutomationSources: PipelineToPipelineAutomationConnection;
  stage?: Maybe<PipelineStage>;
  updatedAt: Scalars['ISO8601DateTime'];
  workspace: Workspace;
};


export type PipelineIssuesArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  repositoryId?: InputMaybe<Scalars['ID']>;
  state?: InputMaybe<IssueState>;
};


export type PipelinePipelineToPipelineAutomationDestinationsArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
};


export type PipelinePipelineToPipelineAutomationSourcesArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
};

/** The connection type for Pipeline. */
export type PipelineConnection = {
  __typename?: 'PipelineConnection';
  /** A list of edges. */
  edges: Array<PipelineEdge>;
  /** A list of nodes. */
  nodes: Array<Pipeline>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  totalCount: Scalars['Int'];
};

export type PipelineCounts = {
  __typename?: 'PipelineCounts';
  issuesCount: Scalars['Int'];
  pullRequestsCount: Scalars['Int'];
  sumEstimates: Scalars['Float'];
};

/** An edge in a connection. */
export type PipelineEdge = {
  __typename?: 'PipelineEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
  /** The item at the end of the edge. */
  node: Pipeline;
};

export type PipelineIssue = {
  __typename?: 'PipelineIssue';
  id: Scalars['ID'];
  issue: Issue;
  itemAfter?: Maybe<PipelineIssue>;
  itemBefore?: Maybe<PipelineIssue>;
  latestTransferTime?: Maybe<Scalars['ISO8601DateTime']>;
  pipeline: Pipeline;
  priority?: Maybe<Priority>;
  relativePosition: Scalars['BigInt'];
  workspace: Workspace;
};

/** The connection type for PipelineIssue. */
export type PipelineIssueConnection = {
  __typename?: 'PipelineIssueConnection';
  /** A list of edges. */
  edges: Array<PipelineIssueEdge>;
  /** A list of nodes. */
  nodes: Array<PipelineIssue>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  totalCount: Scalars['Int'];
};

/** An edge in a connection. */
export type PipelineIssueEdge = {
  __typename?: 'PipelineIssueEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
  /** The item at the end of the edge. */
  node: PipelineIssue;
};

export type PipelineIssueMove = {
  __typename?: 'PipelineIssueMove';
  movedAt: Scalars['Float'];
  pipelineIssue: PipelineIssue;
  sourcePipelineId?: Maybe<Scalars['ID']>;
};

export enum PipelineIssuePosition {
  End = 'END',
  Start = 'START'
}

export enum PipelineStage {
  Completed = 'COMPLETED',
  Development = 'DEVELOPMENT',
  Review = 'REVIEW'
}

export type PipelineToPipelineAutomation = Node & Timestamps & {
  __typename?: 'PipelineToPipelineAutomation';
  createdAt: Scalars['ISO8601DateTime'];
  destinationPipeline: Pipeline;
  id: Scalars['ID'];
  sourcePipeline: Pipeline;
  updatedAt: Scalars['ISO8601DateTime'];
};

/** The connection type for PipelineToPipelineAutomation. */
export type PipelineToPipelineAutomationConnection = {
  __typename?: 'PipelineToPipelineAutomationConnection';
  /** A list of edges. */
  edges: Array<PipelineToPipelineAutomationEdge>;
  /** A list of nodes. */
  nodes: Array<PipelineToPipelineAutomation>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  totalCount: Scalars['Int'];
};

/** An edge in a connection. */
export type PipelineToPipelineAutomationEdge = {
  __typename?: 'PipelineToPipelineAutomationEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
  /** The item at the end of the edge. */
  node: PipelineToPipelineAutomation;
};

export type Priority = Timestamps & {
  __typename?: 'Priority';
  color: Scalars['String'];
  createdAt: Scalars['ISO8601DateTime'];
  description?: Maybe<Scalars['String']>;
  id: Scalars['ID'];
  name: Scalars['String'];
  updatedAt: Scalars['ISO8601DateTime'];
};

/** The connection type for Priority. */
export type PriorityConnection = {
  __typename?: 'PriorityConnection';
  /** A list of edges. */
  edges: Array<PriorityEdge>;
  /** A list of nodes. */
  nodes: Array<Priority>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  totalCount: Scalars['Int'];
};

/** An edge in a connection. */
export type PriorityEdge = {
  __typename?: 'PriorityEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
  /** The item at the end of the edge. */
  node: Priority;
};

export type Project = IssueProgress & Node & Timestamps & ViewerPermission & ZenhubEpicIssueProgress & {
  __typename?: 'Project';
  closedAt?: Maybe<Scalars['ISO8601DateTime']>;
  createdAt: Scalars['ISO8601DateTime'];
  creator?: Maybe<ZenhubUser>;
  description?: Maybe<Scalars['String']>;
  endOn?: Maybe<Scalars['ISO8601Date']>;
  /** @deprecated This field must not be used. Use zenhubEpics. */
  epics: EpicConnection;
  id: Scalars['ID'];
  issueCountProgress?: Maybe<IssueCountProgress>;
  issueEstimateProgress?: Maybe<IssueEstimateProgress>;
  name: Scalars['String'];
  startOn?: Maybe<Scalars['ISO8601Date']>;
  state: ProjectState;
  updatedAt: Scalars['ISO8601DateTime'];
  viewerAbilities: ProjectAbilities;
  viewerPermission: PermissionLevel;
  zenhubEpics: ZenhubEpicConnection;
  zenhubIssueCountProgress?: Maybe<IssueCountProgress>;
  zenhubIssueEstimateProgress?: Maybe<IssueEstimateProgress>;
};


export type ProjectEpicsArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
};


export type ProjectZenhubEpicsArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
};

export type ProjectAbilities = {
  __typename?: 'ProjectAbilities';
  closeAllEpics: Scalars['Boolean'];
  scaleDates: Scalars['Boolean'];
  shiftDates: Scalars['Boolean'];
};

/** The connection type for Project. */
export type ProjectConnection = {
  __typename?: 'ProjectConnection';
  /** A list of edges. */
  edges: Array<ProjectEdge>;
  /** A list of nodes. */
  nodes: Array<Project>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  totalCount: Scalars['Int'];
};

export enum ProjectDateAction {
  Reset = 'RESET',
  Scale = 'SCALE',
  Shift = 'SHIFT'
}

/** An edge in a connection. */
export type ProjectEdge = {
  __typename?: 'ProjectEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
  /** The item at the end of the edge. */
  node: Project;
};

export type ProjectInput = {
  description?: InputMaybe<Scalars['String']>;
  name: Scalars['String'];
};

export enum ProjectState {
  Closed = 'CLOSED',
  Open = 'OPEN'
}

export type PullRequest = GithubTimestamps & Timestamps & {
  __typename?: 'PullRequest';
  createdAt: Scalars['ISO8601DateTime'];
  draft: Scalars['Boolean'];
  ghCreatedAt: Scalars['ISO8601DateTime'];
  ghUpdatedAt: Scalars['ISO8601DateTime'];
  id: Scalars['ID'];
  issue: Issue;
  state: PullRequestState;
  updatedAt: Scalars['ISO8601DateTime'];
};

export type PullRequestReview = GithubTimestamps & Timestamps & {
  __typename?: 'PullRequestReview';
  createdAt: Scalars['ISO8601DateTime'];
  ghCreatedAt: Scalars['ISO8601DateTime'];
  ghId: Scalars['Int'];
  ghNodeId: Scalars['ID'];
  ghUpdatedAt: Scalars['ISO8601DateTime'];
  id: Scalars['ID'];
  state: PullRequestReviewState;
  submittedAt: Scalars['ISO8601DateTime'];
  updatedAt: Scalars['ISO8601DateTime'];
  user?: Maybe<Owner>;
};

/** The connection type for PullRequestReview. */
export type PullRequestReviewConnection = {
  __typename?: 'PullRequestReviewConnection';
  /** A list of edges. */
  edges: Array<PullRequestReviewEdge>;
  /** A list of nodes. */
  nodes: Array<PullRequestReview>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  totalCount: Scalars['Int'];
};

/** An edge in a connection. */
export type PullRequestReviewEdge = {
  __typename?: 'PullRequestReviewEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
  /** The item at the end of the edge. */
  node: PullRequestReview;
};

export enum PullRequestReviewState {
  Approved = 'APPROVED',
  ChangesRequested = 'CHANGES_REQUESTED',
  Commented = 'COMMENTED',
  Dismissed = 'DISMISSED'
}

export enum PullRequestState {
  Closed = 'CLOSED',
  Merged = 'MERGED',
  Open = 'OPEN'
}

export type Query = {
  __typename?: 'Query';
  /** Lookup an Issue by repository_gh_id or repository_id  and issue_number */
  issueByInfo: Issue;
  /**
   * A concatenated list of all issues connected to any
   *            of the given issues in the passed workspace
   */
  issueConnections: IssueConnection;
  /** Fetches an object given its ID. */
  node?: Maybe<Node>;
  /** Fetches a list of objects given a list of IDs. */
  nodes: Array<Maybe<Node>>;
  /** Lookup an Owner by GitHub database ID */
  ownerByGhId?: Maybe<Owner>;
  /** Lookup an Owner by GitHub login */
  ownerByLogin?: Maybe<Owner>;
  /** preview sprint config schedules */
  previewSprintConfig?: Maybe<SprintConfigPreview>;
  /** User's recently viewed Workspaces */
  recentlyViewedWorkspaces: WorkspaceConnection;
  /** Lookup repositories by their GitHub ID */
  repositoriesByGhId: Array<Repository>;
  /** Search and filter closed issues per pipeline */
  searchClosedIssues?: Maybe<IssueConnection>;
  /** Search and filter issues inside repository */
  searchIssues?: Maybe<IssueConnection>;
  /** Search and filter issues per pipeline */
  searchIssuesByPipeline?: Maybe<IssueConnection>;
  /** Search and filter issues inside zenhub epics */
  searchIssuesByZenhubEpics?: Maybe<IssueConnection>;
  /** PipelineToPipelineAutomation records that are triggered when an issue moves into a Pipeline */
  triggeredPipelineToPipelineAutomations: PipelineToPipelineAutomationConnection;
  /** Validate a workspace name within a zorg */
  validateWorkspaceName: Scalars['Boolean'];
  /** Return the current zenhub user */
  viewer: ZenhubUser;
  /** Lookup Workspace by its ID */
  workspace?: Maybe<Workspace>;
};


export type QueryIssueByInfoArgs = {
  issueNumber: Scalars['Int'];
  repositoryGhId?: InputMaybe<Scalars['Int']>;
  repositoryId?: InputMaybe<Scalars['ID']>;
};


export type QueryIssueConnectionsArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  issueIds: Array<Scalars['ID']>;
  last?: InputMaybe<Scalars['Int']>;
  workspaceId: Scalars['ID'];
};


export type QueryNodeArgs = {
  id: Scalars['ID'];
};


export type QueryNodesArgs = {
  ids: Array<Scalars['ID']>;
};


export type QueryOwnerByGhIdArgs = {
  ghId: Scalars['Int'];
};


export type QueryOwnerByLoginArgs = {
  login: Scalars['String'];
};


export type QueryPreviewSprintConfigArgs = {
  endOn: Scalars['ISO8601Date'];
  startOn: Scalars['ISO8601Date'];
  tzIdentifier: Scalars['String'];
};


export type QueryRecentlyViewedWorkspacesArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  repositoryGhIds?: InputMaybe<Array<Scalars['ID']>>;
};


export type QueryRepositoriesByGhIdArgs = {
  ghIds: Array<Scalars['Int']>;
};


export type QuerySearchClosedIssuesArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  filters: IssueSearchFiltersInput;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  query?: InputMaybe<Scalars['String']>;
  workspaceId: Scalars['ID'];
};


export type QuerySearchIssuesArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  filters: EpicAssignableIssueSearchFiltersInput;
  first?: InputMaybe<Scalars['Int']>;
  includeClosed?: InputMaybe<Scalars['Boolean']>;
  last?: InputMaybe<Scalars['Int']>;
  query?: InputMaybe<Scalars['String']>;
  workspaceId: Scalars['ID'];
};


export type QuerySearchIssuesByPipelineArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  filters: IssueSearchFiltersInput;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  order?: InputMaybe<IssueOrderInput>;
  pipelineId: Scalars['ID'];
  query?: InputMaybe<Scalars['String']>;
};


export type QuerySearchIssuesByZenhubEpicsArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  filters: ZenhubEpicIssueSearchFiltersInput;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  zenhubEpicIds: Array<Scalars['ID']>;
};


export type QueryTriggeredPipelineToPipelineAutomationsArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  issue: IssueInfoInput;
  last?: InputMaybe<Scalars['Int']>;
  pipelineId: Scalars['ID'];
};


export type QueryValidateWorkspaceNameArgs = {
  name: Scalars['String'];
  zenhubOrganizationId: Scalars['ID'];
};


export type QueryWorkspaceArgs = {
  id: Scalars['ID'];
};

export type Release = Node & Timestamps & ViewerPermission & {
  __typename?: 'Release';
  closedAt?: Maybe<Scalars['ISO8601DateTime']>;
  createdAt: Scalars['ISO8601DateTime'];
  description?: Maybe<Scalars['String']>;
  endOn?: Maybe<Scalars['ISO8601Date']>;
  id: Scalars['ID'];
  issues: IssueConnection;
  repositories: RepositoryConnection;
  startOn?: Maybe<Scalars['ISO8601Date']>;
  state: ReleaseState;
  title: Scalars['String'];
  updatedAt: Scalars['ISO8601DateTime'];
  viewerPermission: PermissionLevel;
};


export type ReleaseIssuesArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
};


export type ReleaseRepositoriesArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
};

/** The connection type for Release. */
export type ReleaseConnection = {
  __typename?: 'ReleaseConnection';
  /** A list of edges. */
  edges: Array<ReleaseEdge>;
  /** A list of nodes. */
  nodes: Array<Release>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  totalCount: Scalars['Int'];
};

export type ReleaseCreateInput = {
  description?: InputMaybe<Scalars['String']>;
  endOn: Scalars['ISO8601Date'];
  repositoryGhIds: Array<Scalars['Int']>;
  startOn: Scalars['ISO8601Date'];
  title: Scalars['String'];
};

/** An edge in a connection. */
export type ReleaseEdge = {
  __typename?: 'ReleaseEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
  /** The item at the end of the edge. */
  node: Release;
};

export enum ReleaseState {
  Closed = 'CLOSED',
  Open = 'OPEN'
}

/** Filter by ReleaseState */
export type ReleaseStateInput = {
  eq: ReleaseState;
};

export type ReleaseUpdateInput = {
  description?: InputMaybe<Scalars['String']>;
  endOn?: InputMaybe<Scalars['ISO8601Date']>;
  startOn?: InputMaybe<Scalars['ISO8601Date']>;
  state?: InputMaybe<ReleaseState>;
  title?: InputMaybe<Scalars['String']>;
};

/** Autogenerated input type of RemoveAssigneesFromIssues */
export type RemoveAssigneesFromIssuesInput = {
  assigneeIds: Array<Scalars['ID']>;
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']>;
  issueIds: Array<Scalars['ID']>;
};

/** Autogenerated return type of RemoveAssigneesFromIssues */
export type RemoveAssigneesFromIssuesPayload = {
  __typename?: 'RemoveAssigneesFromIssuesPayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  failedIssues: Array<Issue>;
  githubErrors: Scalars['JSON'];
  successCount: Scalars['Int'];
};

/** Autogenerated input type of RemoveAssigneesFromZenhubEpics */
export type RemoveAssigneesFromZenhubEpicsInput = {
  assigneeIds: Array<Scalars['ID']>;
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']>;
  zenhubEpicIds: Array<Scalars['ID']>;
};

/** Autogenerated return type of RemoveAssigneesFromZenhubEpics */
export type RemoveAssigneesFromZenhubEpicsPayload = {
  __typename?: 'RemoveAssigneesFromZenhubEpicsPayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  zenhubEpics: Array<ZenhubEpic>;
};

/** Autogenerated input type of RemoveEpicFromProject */
export type RemoveEpicFromProjectInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']>;
  epicId: Scalars['ID'];
  projectId: Scalars['ID'];
};

/** Autogenerated return type of RemoveEpicFromProject */
export type RemoveEpicFromProjectPayload = {
  __typename?: 'RemoveEpicFromProjectPayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  epic: Epic;
  project: Project;
};

/** Autogenerated input type of RemoveEpicFromRoadmap */
export type RemoveEpicFromRoadmapInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']>;
  epicId: Scalars['ID'];
  roadmapId: Scalars['ID'];
};

/** Autogenerated return type of RemoveEpicFromRoadmap */
export type RemoveEpicFromRoadmapPayload = {
  __typename?: 'RemoveEpicFromRoadmapPayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  epic: Epic;
  roadmap: Roadmap;
};

/** Autogenerated input type of RemoveEstimateSetValue */
export type RemoveEstimateSetValueInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']>;
  repositoryGhId: Scalars['Int'];
  value: Scalars['Float'];
};

/** Autogenerated return type of RemoveEstimateSetValue */
export type RemoveEstimateSetValuePayload = {
  __typename?: 'RemoveEstimateSetValuePayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  estimateSet: EstimateSet;
};

/** Autogenerated input type of RemoveEstimationVote */
export type RemoveEstimationVoteInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']>;
  estimationVoteId: Scalars['ID'];
};

/** Autogenerated return type of RemoveEstimationVote */
export type RemoveEstimationVotePayload = {
  __typename?: 'RemoveEstimationVotePayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  estimationVote: EstimationVote;
};

/** Autogenerated input type of RemoveIssueInfoPriorities */
export type RemoveIssueInfoPrioritiesInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']>;
  issues: Array<IssueInfoInput>;
  workspaceId: Scalars['ID'];
};

/** Autogenerated return type of RemoveIssueInfoPriorities */
export type RemoveIssueInfoPrioritiesPayload = {
  __typename?: 'RemoveIssueInfoPrioritiesPayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  pipelineIssues: Array<PipelineIssue>;
};

/** Autogenerated input type of RemoveIssuesFromEpics */
export type RemoveIssuesFromEpicsInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']>;
  epicIds: Array<Scalars['ID']>;
  issueIds: Array<Scalars['ID']>;
};

/** Autogenerated return type of RemoveIssuesFromEpics */
export type RemoveIssuesFromEpicsPayload = {
  __typename?: 'RemoveIssuesFromEpicsPayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  epics: Array<Epic>;
};

/** Autogenerated input type of RemoveIssuesFromReleases */
export type RemoveIssuesFromReleasesInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']>;
  issueIds: Array<Scalars['ID']>;
  releaseIds: Array<Scalars['ID']>;
};

/** Autogenerated return type of RemoveIssuesFromReleases */
export type RemoveIssuesFromReleasesPayload = {
  __typename?: 'RemoveIssuesFromReleasesPayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  releases: Array<Release>;
};

/** Autogenerated input type of RemoveIssuesFromSprints */
export type RemoveIssuesFromSprintsInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']>;
  issueIds: Array<Scalars['ID']>;
  sprintIds: Array<Scalars['ID']>;
};

/** Autogenerated return type of RemoveIssuesFromSprints */
export type RemoveIssuesFromSprintsPayload = {
  __typename?: 'RemoveIssuesFromSprintsPayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  sprints: Array<Sprint>;
};

/** Autogenerated input type of RemoveIssuesFromZenhubEpics */
export type RemoveIssuesFromZenhubEpicsInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']>;
  issueIds: Array<Scalars['ID']>;
  zenhubEpicIds: Array<Scalars['ID']>;
};

/** Autogenerated return type of RemoveIssuesFromZenhubEpics */
export type RemoveIssuesFromZenhubEpicsPayload = {
  __typename?: 'RemoveIssuesFromZenhubEpicsPayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  zenhubEpics: Array<ZenhubEpic>;
};

/** Autogenerated input type of RemoveLabelsFromIssues */
export type RemoveLabelsFromIssuesInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']>;
  issueIds: Array<Scalars['ID']>;
  labelIds: Array<Scalars['ID']>;
};

/** Autogenerated return type of RemoveLabelsFromIssues */
export type RemoveLabelsFromIssuesPayload = {
  __typename?: 'RemoveLabelsFromIssuesPayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  failedIssues: Array<Issue>;
  githubErrors: Scalars['JSON'];
  successCount: Scalars['Int'];
};

/** Autogenerated input type of RemoveProjectFromRoadmap */
export type RemoveProjectFromRoadmapInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']>;
  projectId: Scalars['ID'];
  roadmapId: Scalars['ID'];
};

/** Autogenerated return type of RemoveProjectFromRoadmap */
export type RemoveProjectFromRoadmapPayload = {
  __typename?: 'RemoveProjectFromRoadmapPayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  project: Project;
  projectDeleted: Scalars['Boolean'];
  roadmap: Roadmap;
};

/** Autogenerated input type of RemoveRepositoriesFromRelease */
export type RemoveRepositoriesFromReleaseInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']>;
  releaseId: Scalars['ID'];
  repositoryGhIds: Array<Scalars['Int']>;
};

/** Autogenerated return type of RemoveRepositoriesFromRelease */
export type RemoveRepositoriesFromReleasePayload = {
  __typename?: 'RemoveRepositoriesFromReleasePayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  release: Release;
};

/** Autogenerated input type of RemoveUserFromZenhubOrganization */
export type RemoveUserFromZenhubOrganizationInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']>;
  zenhubOrganizationId: Scalars['ID'];
  zenhubUserId: Scalars['ID'];
};

/** Autogenerated return type of RemoveUserFromZenhubOrganization */
export type RemoveUserFromZenhubOrganizationPayload = {
  __typename?: 'RemoveUserFromZenhubOrganizationPayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  zenhubOrganization: ZenhubOrganization;
};

/** Autogenerated input type of RemoveWorkspaceLabelFilters */
export type RemoveWorkspaceLabelFiltersInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']>;
  workspaceLabelFiltersIds: Array<Scalars['ID']>;
};

/** Autogenerated return type of RemoveWorkspaceLabelFilters */
export type RemoveWorkspaceLabelFiltersPayload = {
  __typename?: 'RemoveWorkspaceLabelFiltersPayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** deleted workspace label filters */
  workspaceLabelFilters: Array<WorkspaceLabelFilter>;
};

/** Autogenerated input type of RemoveZenhubEpicFromProject */
export type RemoveZenhubEpicFromProjectInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']>;
  projectId: Scalars['ID'];
  zenhubEpicId: Scalars['ID'];
};

/** Autogenerated return type of RemoveZenhubEpicFromProject */
export type RemoveZenhubEpicFromProjectPayload = {
  __typename?: 'RemoveZenhubEpicFromProjectPayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  project: Project;
  zenhubEpic: ZenhubEpic;
};

/** Autogenerated input type of RemoveZenhubEpicFromRoadmap */
export type RemoveZenhubEpicFromRoadmapInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']>;
  force?: InputMaybe<Scalars['Boolean']>;
  roadmapId: Scalars['ID'];
  zenhubEpicId: Scalars['ID'];
};

/** Autogenerated return type of RemoveZenhubEpicFromRoadmap */
export type RemoveZenhubEpicFromRoadmapPayload = {
  __typename?: 'RemoveZenhubEpicFromRoadmapPayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  roadmap: Roadmap;
  zenhubEpic: ZenhubEpic;
  zenhubEpicDeleted: Scalars['Boolean'];
};

/** Autogenerated input type of RemoveZenhubLabelsFromZenhubEpics */
export type RemoveZenhubLabelsFromZenhubEpicsInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']>;
  zenhubEpicIds: Array<Scalars['ID']>;
  zenhubLabelIds: Array<Scalars['ID']>;
};

/** Autogenerated return type of RemoveZenhubLabelsFromZenhubEpics */
export type RemoveZenhubLabelsFromZenhubEpicsPayload = {
  __typename?: 'RemoveZenhubLabelsFromZenhubEpicsPayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  zenhubEpics: Array<ZenhubEpic>;
};

/** Autogenerated input type of ReopenIssues */
export type ReopenIssuesInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']>;
  issueIds: Array<Scalars['ID']>;
  pipelineId: Scalars['ID'];
  position: PipelineIssuePosition;
};

/** Autogenerated return type of ReopenIssues */
export type ReopenIssuesPayload = {
  __typename?: 'ReopenIssuesPayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  failedIssues: Array<Issue>;
  githubErrors: Scalars['JSON'];
  successCount: Scalars['Int'];
};

export type Repository = GithubTimestamps & Node & Timestamps & {
  __typename?: 'Repository';
  assignableUsers: UserConnection;
  createdAt: Scalars['ISO8601DateTime'];
  description?: Maybe<Scalars['String']>;
  estimateSet: EstimateSet;
  ghCreatedAt: Scalars['ISO8601DateTime'];
  ghId: Scalars['Int'];
  ghNodeId?: Maybe<Scalars['ID']>;
  ghUpdatedAt: Scalars['ISO8601DateTime'];
  id: Scalars['ID'];
  import: RepositoryImport;
  isFavorite: Scalars['Boolean'];
  isPrivate: Scalars['Boolean'];
  issueTemplates: IssueTemplateConnection;
  issues: IssueConnection;
  labels: LabelConnection;
  name: Scalars['String'];
  owner: Owner;
  ownerName: Scalars['String'];
  permissions: RepositoryPermission;
  releases: ReleaseConnection;
  updatedAt: Scalars['ISO8601DateTime'];
  /** @deprecated Use `Repository.workspaces_connection`. */
  workspaces: Array<Workspace>;
  workspacesConnection: WorkspaceConnection;
};


export type RepositoryAssignableUsersArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  query?: InputMaybe<Scalars['String']>;
};


export type RepositoryIssueTemplatesArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
};


export type RepositoryIssuesArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
};


export type RepositoryLabelsArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
};


export type RepositoryReleasesArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
};


export type RepositoryWorkspacesConnectionArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
};

/** The connection type for Repository. */
export type RepositoryConnection = {
  __typename?: 'RepositoryConnection';
  /** A list of edges. */
  edges: Array<RepositoryEdge>;
  /** A list of nodes. */
  nodes: Array<Repository>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  totalCount: Scalars['Int'];
};

/** An edge in a connection. */
export type RepositoryEdge = {
  __typename?: 'RepositoryEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
  /** The item at the end of the edge. */
  node: Repository;
};

export type RepositoryFavorite = Timestamps & {
  __typename?: 'RepositoryFavorite';
  createdAt: Scalars['ISO8601DateTime'];
  id: Scalars['ID'];
  repository: Repository;
  updatedAt: Scalars['ISO8601DateTime'];
};

/** The connection type for RepositoryFavorite. */
export type RepositoryFavoriteConnection = {
  __typename?: 'RepositoryFavoriteConnection';
  /** A list of edges. */
  edges: Array<RepositoryFavoriteEdge>;
  /** A list of nodes. */
  nodes: Array<RepositoryFavorite>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  totalCount: Scalars['Int'];
};

/** An edge in a connection. */
export type RepositoryFavoriteEdge = {
  __typename?: 'RepositoryFavoriteEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
  /** The item at the end of the edge. */
  node: RepositoryFavorite;
};

export type RepositoryGithubProjectImport = {
  __typename?: 'RepositoryGithubProjectImport';
  ghProjectId: Scalars['String'];
  ghProjectName?: Maybe<Scalars['String']>;
  id: Scalars['ID'];
  pipelines: PipelineConnection;
  repository: Repository;
};


export type RepositoryGithubProjectImportPipelinesArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
};

export type RepositoryImport = Timestamps & {
  __typename?: 'RepositoryImport';
  createdAt: Scalars['ISO8601DateTime'];
  id: Scalars['ID'];
  resources: RepositoryImportResourceConnection;
  state: RepositoryImportState;
  updatedAt: Scalars['ISO8601DateTime'];
};


export type RepositoryImportResourcesArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
};

export type RepositoryImportResource = Timestamps & {
  __typename?: 'RepositoryImportResource';
  completedAt?: Maybe<Scalars['ISO8601DateTime']>;
  completedPages?: Maybe<Scalars['Int']>;
  createdAt: Scalars['ISO8601DateTime'];
  id: Scalars['ID'];
  kind: RepositoryImportResourceKind;
  startedAt?: Maybe<Scalars['ISO8601DateTime']>;
  state: RepositoryImportResourceState;
  totalPages?: Maybe<Scalars['Int']>;
  updatedAt: Scalars['ISO8601DateTime'];
};

/** The connection type for RepositoryImportResource. */
export type RepositoryImportResourceConnection = {
  __typename?: 'RepositoryImportResourceConnection';
  /** A list of edges. */
  edges: Array<RepositoryImportResourceEdge>;
  /** A list of nodes. */
  nodes: Array<RepositoryImportResource>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  totalCount: Scalars['Int'];
};

/** An edge in a connection. */
export type RepositoryImportResourceEdge = {
  __typename?: 'RepositoryImportResourceEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
  /** The item at the end of the edge. */
  node: RepositoryImportResource;
};

export enum RepositoryImportResourceKind {
  ClosedIssues = 'CLOSED_ISSUES',
  OpenIssues = 'OPEN_ISSUES'
}

export enum RepositoryImportResourceState {
  Completed = 'COMPLETED',
  InProgress = 'IN_PROGRESS',
  Pending = 'PENDING'
}

export enum RepositoryImportState {
  Completed = 'COMPLETED',
  InProgress = 'IN_PROGRESS',
  Pending = 'PENDING',
  Usable = 'USABLE'
}

export type RepositoryMatch = {
  __typename?: 'RepositoryMatch';
  matchedRepositories: Array<Repository>;
  workspace: Workspace;
};

export type RepositoryPermission = {
  __typename?: 'RepositoryPermission';
  admin: Scalars['Boolean'];
  pull: Scalars['Boolean'];
  push: Scalars['Boolean'];
};

export type ReviewRequest = Timestamps & {
  __typename?: 'ReviewRequest';
  createdAt: Scalars['ISO8601DateTime'];
  ghId: Scalars['Int'];
  ghNodeId: Scalars['ID'];
  id: Scalars['ID'];
  reviewer?: Maybe<Reviewer>;
  updatedAt: Scalars['ISO8601DateTime'];
};

/** The connection type for ReviewRequest. */
export type ReviewRequestConnection = {
  __typename?: 'ReviewRequestConnection';
  /** A list of edges. */
  edges: Array<ReviewRequestEdge>;
  /** A list of nodes. */
  nodes: Array<ReviewRequest>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  totalCount: Scalars['Int'];
};

/** An edge in a connection. */
export type ReviewRequestEdge = {
  __typename?: 'ReviewRequestEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
  /** The item at the end of the edge. */
  node: ReviewRequest;
};

export type Reviewer = User;

export type Roadmap = Node & Timestamps & ViewerPermission & {
  __typename?: 'Roadmap';
  createdAt: Scalars['ISO8601DateTime'];
  id: Scalars['ID'];
  items: RoadmapItemConnection;
  updatedAt: Scalars['ISO8601DateTime'];
  viewerPermission: PermissionLevel;
  workspace: Workspace;
};


export type RoadmapItemsArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  order?: InputMaybe<RoadmapItemOrderInput>;
};

export type RoadmapItem = Epic | Project | ZenhubEpic;

/** The connection type for RoadmapItem. */
export type RoadmapItemConnection = {
  __typename?: 'RoadmapItemConnection';
  /** A list of edges. */
  edges: Array<RoadmapItemEdge>;
  /** A list of nodes. */
  nodes: Array<RoadmapItem>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  totalCount: Scalars['Int'];
};

/** An edge in a connection. */
export type RoadmapItemEdge = {
  __typename?: 'RoadmapItemEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
  /** The item at the end of the edge. */
  node?: Maybe<RoadmapItem>;
};

export enum RoadmapItemOrderField {
  /** Order by item end_on */
  EndOn = 'end_on',
  /** Order by item start_on */
  StartOn = 'start_on'
}

/** Sort roadmap items */
export type RoadmapItemOrderInput = {
  direction: OrderDirection;
  field: RoadmapItemOrderField;
};

export enum Roles {
  Admin = 'ADMIN',
  Member = 'MEMBER'
}

export type ScopeChange = {
  __typename?: 'ScopeChange';
  action: BucketIssueHistoryAction;
  effectiveAt: Scalars['ISO8601DateTime'];
  estimateValue?: Maybe<Scalars['Float']>;
  issue: Issue;
};

/** The connection type for ScopeChange. */
export type ScopeChangeConnection = {
  __typename?: 'ScopeChangeConnection';
  /** A list of edges. */
  edges: Array<ScopeChangeEdge>;
  /** A list of nodes. */
  nodes: Array<ScopeChange>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  totalCount: Scalars['Int'];
};

/** An edge in a connection. */
export type ScopeChangeEdge = {
  __typename?: 'ScopeChangeEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
  /** The item at the end of the edge. */
  node: ScopeChange;
};

/** Autogenerated input type of SetEstimate */
export type SetEstimateInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']>;
  issueId: Scalars['ID'];
  value?: InputMaybe<Scalars['Float']>;
};

/** Autogenerated return type of SetEstimate */
export type SetEstimatePayload = {
  __typename?: 'SetEstimatePayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  issue: Issue;
};

/** Autogenerated input type of SetEstimationVote */
export type SetEstimationVoteInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']>;
  estimationVoteId: Scalars['ID'];
  value?: InputMaybe<Scalars['Float']>;
};

/** Autogenerated return type of SetEstimationVote */
export type SetEstimationVotePayload = {
  __typename?: 'SetEstimationVotePayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  estimationVote: EstimationVote;
};

/** Autogenerated input type of SetFavoriteWorkspace */
export type SetFavoriteWorkspaceInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']>;
  workspaceId: Scalars['ID'];
};

/** Autogenerated return type of SetFavoriteWorkspace */
export type SetFavoriteWorkspacePayload = {
  __typename?: 'SetFavoriteWorkspacePayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  workspaceFavorite: WorkspaceFavorite;
};

/** Autogenerated input type of SetIssueInfoPriorities */
export type SetIssueInfoPrioritiesInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']>;
  issues: Array<IssueInfoInput>;
  priorityId: Scalars['ID'];
};

/** Autogenerated return type of SetIssueInfoPriorities */
export type SetIssueInfoPrioritiesPayload = {
  __typename?: 'SetIssueInfoPrioritiesPayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  pipelineIssues: Array<PipelineIssue>;
};

/** Autogenerated input type of SetMultipleEstimates */
export type SetMultipleEstimatesInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']>;
  issueIds: Array<Scalars['ID']>;
  value?: InputMaybe<Scalars['Float']>;
};

/** Autogenerated input type of SetMultipleEstimatesOnZenhubEpics */
export type SetMultipleEstimatesOnZenhubEpicsInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']>;
  value?: InputMaybe<Scalars['Float']>;
  zenhubEpicIds: Array<Scalars['ID']>;
};

/** Autogenerated return type of SetMultipleEstimatesOnZenhubEpics */
export type SetMultipleEstimatesOnZenhubEpicsPayload = {
  __typename?: 'SetMultipleEstimatesOnZenhubEpicsPayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  zenhubEpics: Array<ZenhubEpic>;
};

/** Autogenerated return type of SetMultipleEstimates */
export type SetMultipleEstimatesPayload = {
  __typename?: 'SetMultipleEstimatesPayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  issues: Array<Issue>;
};

/** Autogenerated input type of SetPipelineStages */
export type SetPipelineStagesInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']>;
  completedPipelineIds?: InputMaybe<Array<Scalars['ID']>>;
  inDevelopmentPipelineIds?: InputMaybe<Array<Scalars['ID']>>;
  inReviewPipelineIds?: InputMaybe<Array<Scalars['ID']>>;
  workspaceId: Scalars['ID'];
};

/** Autogenerated return type of SetPipelineStages */
export type SetPipelineStagesPayload = {
  __typename?: 'SetPipelineStagesPayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  pipelines: Array<Pipeline>;
};

/** Autogenerated input type of SetPriorityOnPipelineIssues */
export type SetPriorityOnPipelineIssuesInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']>;
  pipelineIssueIds: Array<Scalars['ID']>;
  priorityId?: InputMaybe<Scalars['ID']>;
};

/** Autogenerated return type of SetPriorityOnPipelineIssues */
export type SetPriorityOnPipelineIssuesPayload = {
  __typename?: 'SetPriorityOnPipelineIssuesPayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  pipelineIssues: Array<PipelineIssue>;
};

/** Autogenerated input type of SetPullRequestPipeline */
export type SetPullRequestPipelineInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']>;
  pipelineId: Scalars['ID'];
  workspaceId: Scalars['ID'];
};

/** Autogenerated return type of SetPullRequestPipeline */
export type SetPullRequestPipelinePayload = {
  __typename?: 'SetPullRequestPipelinePayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  workspace: Workspace;
};

/** Autogenerated input type of SetWorkspaceViewedNow */
export type SetWorkspaceViewedNowInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']>;
  workspaceId: Scalars['ID'];
};

/** Autogenerated return type of SetWorkspaceViewedNow */
export type SetWorkspaceViewedNowPayload = {
  __typename?: 'SetWorkspaceViewedNowPayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  workspace: Workspace;
};

/** Autogenerated input type of SplitWorkspaceRepository */
export type SplitWorkspaceRepositoryInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']>;
  repositoryGhId: Scalars['Int'];
  workspaceId: Scalars['ID'];
};

/** Autogenerated return type of SplitWorkspaceRepository */
export type SplitWorkspaceRepositoryPayload = {
  __typename?: 'SplitWorkspaceRepositoryPayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  splitWorkspace: Workspace;
  workspace: Workspace;
};

export type Sprint = Node & Timestamps & {
  __typename?: 'Sprint';
  closedIssuesCount: Scalars['Int'];
  completedPoints: Scalars['Float'];
  createdAt: Scalars['ISO8601DateTime'];
  endAt: Scalars['ISO8601DateTime'];
  id: Scalars['ID'];
  issues: IssueConnection;
  name?: Maybe<Scalars['String']>;
  /** batching is disabled for this field */
  scopeChange: ScopeChangeConnection;
  sprintIssues: SprintIssueConnection;
  startAt: Scalars['ISO8601DateTime'];
  state: SprintState;
  totalPoints: Scalars['Float'];
  updatedAt: Scalars['ISO8601DateTime'];
  workspace: Workspace;
};


export type SprintIssuesArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
};


export type SprintScopeChangeArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
};


export type SprintSprintIssuesArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  labelIds?: InputMaybe<Array<Scalars['ID']>>;
  last?: InputMaybe<Scalars['Int']>;
};

export type SprintConfig = Node & Timestamps & {
  __typename?: 'SprintConfig';
  createdAt: Scalars['ISO8601DateTime'];
  endDay: SprintConfigDayOfTheWeek;
  id: Scalars['ID'];
  name: Scalars['String'];
  period: Scalars['Int'];
  settings: SprintConfigSettings;
  startDay: SprintConfigDayOfTheWeek;
  tzIdentifier: Scalars['String'];
  updatedAt: Scalars['ISO8601DateTime'];
  workspace: Workspace;
};

export type SprintConfigCreateInput = {
  endOn: Scalars['ISO8601Date'];
  name: Scalars['String'];
  settings: SprintConfigSettingsInput;
  startOn: Scalars['ISO8601Date'];
  tzIdentifier: Scalars['String'];
  workspaceId: Scalars['ID'];
};

export enum SprintConfigDayOfTheWeek {
  Friday = 'FRIDAY',
  Monday = 'MONDAY',
  Saturday = 'SATURDAY',
  Sunday = 'SUNDAY',
  Thursday = 'THURSDAY',
  Tuesday = 'TUESDAY',
  Wednesday = 'WEDNESDAY'
}

export type SprintConfigIssuesFromPipelineInput = {
  enabled: Scalars['Boolean'];
  pipelineId?: InputMaybe<Scalars['ID']>;
  totalStoryPoints?: InputMaybe<Scalars['Float']>;
};

export type SprintConfigPreview = {
  __typename?: 'SprintConfigPreview';
  periodInWeeks: Scalars['Int'];
  sprints: Array<Sprint>;
};

export type SprintConfigSettings = {
  __typename?: 'SprintConfigSettings';
  issuesFromPipeline: SprintConfigSettingsIssuesFromPipeline;
  moveUnfinishedIssues: Scalars['Boolean'];
};

export type SprintConfigSettingsInput = {
  issuesFromPipeline: SprintConfigIssuesFromPipelineInput;
  moveUnfinishedIssues: Scalars['Boolean'];
};

export type SprintConfigSettingsIssuesFromPipeline = {
  __typename?: 'SprintConfigSettingsIssuesFromPipeline';
  enabled: Scalars['Boolean'];
  pipelineId?: Maybe<Scalars['ID']>;
  totalStoryPoints?: Maybe<Scalars['Float']>;
};

export type SprintConfigUpdateInput = {
  endOn?: InputMaybe<Scalars['ISO8601Date']>;
  name: Scalars['String'];
  settings: SprintConfigSettingsInput;
  startOn?: InputMaybe<Scalars['ISO8601Date']>;
  tzIdentifier?: InputMaybe<Scalars['String']>;
  workspaceId: Scalars['ID'];
};

/** The connection type for Sprint. */
export type SprintConnection = {
  __typename?: 'SprintConnection';
  /** A list of edges. */
  edges: Array<SprintEdge>;
  /** A list of nodes. */
  nodes: Array<Sprint>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  totalCount: Scalars['Int'];
};

/** An edge in a connection. */
export type SprintEdge = {
  __typename?: 'SprintEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
  /** The item at the end of the edge. */
  node: Sprint;
};

export type SprintFiltersInput = {
  id?: InputMaybe<SprintIdInput>;
  state?: InputMaybe<SprintStateInput>;
};

/** Filter sprint ID column */
export type SprintIdInput = {
  in?: InputMaybe<Array<Scalars['ID']>>;
  nin?: InputMaybe<Array<Scalars['ID']>>;
  notInAny?: InputMaybe<Scalars['Boolean']>;
};

export type SprintIssue = Node & Timestamps & {
  __typename?: 'SprintIssue';
  createdAt: Scalars['ISO8601DateTime'];
  id: Scalars['ID'];
  issue: Issue;
  sprint: Sprint;
  updatedAt: Scalars['ISO8601DateTime'];
};

/** The connection type for SprintIssue. */
export type SprintIssueConnection = {
  __typename?: 'SprintIssueConnection';
  /** A list of edges. */
  edges: Array<SprintIssueEdge>;
  /** A list of nodes. */
  nodes: Array<SprintIssue>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  totalCount: Scalars['Int'];
};

/** An edge in a connection. */
export type SprintIssueEdge = {
  __typename?: 'SprintIssueEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
  /** The item at the end of the edge. */
  node: SprintIssue;
};

export enum SprintOrderField {
  EndAt = 'END_AT',
  StartAt = 'START_AT'
}

/** Order of Sprint connection */
export type SprintOrderInput = {
  direction?: InputMaybe<OrderDirection>;
  field?: InputMaybe<SprintOrderField>;
};

export enum SprintState {
  Closed = 'CLOSED',
  Open = 'OPEN'
}

/** Filter by SprintState */
export type SprintStateInput = {
  eq: SprintState;
};

/** Filter a String column */
export type StringInput = {
  in?: InputMaybe<Array<Scalars['String']>>;
  nin?: InputMaybe<Array<Scalars['String']>>;
  notInAny?: InputMaybe<Scalars['Boolean']>;
};

export type TimelineItem = Timestamps & {
  __typename?: 'TimelineItem';
  createdAt: Scalars['ISO8601DateTime'];
  data?: Maybe<Scalars['JSON']>;
  id: Scalars['ID'];
  key: Scalars['String'];
  updatedAt: Scalars['ISO8601DateTime'];
};

/** The connection type for TimelineItem. */
export type TimelineItemConnection = {
  __typename?: 'TimelineItemConnection';
  /** A list of edges. */
  edges: Array<TimelineItemEdge>;
  /** A list of nodes. */
  nodes: Array<TimelineItem>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  totalCount: Scalars['Int'];
};

/** An edge in a connection. */
export type TimelineItemEdge = {
  __typename?: 'TimelineItemEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
  /** The item at the end of the edge. */
  node: TimelineItem;
};

export type Timestamps = {
  createdAt: Scalars['ISO8601DateTime'];
  updatedAt: Scalars['ISO8601DateTime'];
};

export type Unassignable = {
  __typename?: 'Unassignable';
  assignee: User;
  issues: Array<Issue>;
};

/** Autogenerated input type of UpdateEpicDates */
export type UpdateEpicDatesInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']>;
  endOn?: InputMaybe<Scalars['ISO8601Date']>;
  epicId: Scalars['ID'];
  roadmapId?: InputMaybe<Scalars['ID']>;
  startOn?: InputMaybe<Scalars['ISO8601Date']>;
};

/** Autogenerated return type of UpdateEpicDates */
export type UpdateEpicDatesPayload = {
  __typename?: 'UpdateEpicDatesPayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  epic: Epic;
};

/** Autogenerated input type of UpdateEpicIssuesByIssueInfos */
export type UpdateEpicIssuesByIssueInfosInput = {
  addIssues: Array<IssueInfoInput>;
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']>;
  epic: IssueInfoInput;
  removeIssues: Array<IssueInfoInput>;
};

/** Autogenerated return type of UpdateEpicIssuesByIssueInfos */
export type UpdateEpicIssuesByIssueInfosPayload = {
  __typename?: 'UpdateEpicIssuesByIssueInfosPayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  epic: Epic;
  issuesAdded: Array<Maybe<Issue>>;
  issuesRemoved: Array<Maybe<Issue>>;
};

/** Autogenerated input type of UpdateIssue */
export type UpdateIssueInput = {
  body?: InputMaybe<Scalars['String']>;
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']>;
  issueId: Scalars['ID'];
  state?: InputMaybe<IssueState>;
  title?: InputMaybe<Scalars['String']>;
};

/** Autogenerated return type of UpdateIssue */
export type UpdateIssuePayload = {
  __typename?: 'UpdateIssuePayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  issue: Issue;
};

/** Autogenerated input type of UpdatePipeline */
export type UpdatePipelineInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']>;
  description?: InputMaybe<Scalars['String']>;
  name?: InputMaybe<Scalars['String']>;
  pipelineId: Scalars['ID'];
  position?: InputMaybe<Scalars['Int']>;
};

/** Autogenerated return type of UpdatePipeline */
export type UpdatePipelinePayload = {
  __typename?: 'UpdatePipelinePayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  pipeline: Pipeline;
};

/** Autogenerated input type of UpdateProjectDates */
export type UpdateProjectDatesInput = {
  action: ProjectDateAction;
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']>;
  endOn?: InputMaybe<Scalars['ISO8601Date']>;
  projectId: Scalars['ID'];
  startOn?: InputMaybe<Scalars['ISO8601Date']>;
};

/** Autogenerated return type of UpdateProjectDates */
export type UpdateProjectDatesPayload = {
  __typename?: 'UpdateProjectDatesPayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  project: Project;
};

/** Autogenerated input type of UpdateProject */
export type UpdateProjectInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']>;
  description?: InputMaybe<Scalars['String']>;
  name?: InputMaybe<Scalars['String']>;
  projectId: Scalars['ID'];
};

/** Autogenerated return type of UpdateProject */
export type UpdateProjectPayload = {
  __typename?: 'UpdateProjectPayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  project: Project;
};

/** Autogenerated input type of UpdateProjectState */
export type UpdateProjectStateInput = {
  applyToEpics?: InputMaybe<Scalars['Boolean']>;
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']>;
  projectId: Scalars['ID'];
  state: ProjectState;
};

/** Autogenerated return type of UpdateProjectState */
export type UpdateProjectStatePayload = {
  __typename?: 'UpdateProjectStatePayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  project: Project;
};

/** Autogenerated input type of UpdateRelease */
export type UpdateReleaseInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']>;
  release: ReleaseUpdateInput;
  releaseId: Scalars['ID'];
};

/** Autogenerated return type of UpdateRelease */
export type UpdateReleasePayload = {
  __typename?: 'UpdateReleasePayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  release: Release;
};

/** Autogenerated input type of UpdateSprintConfig */
export type UpdateSprintConfigInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']>;
  sprintConfig: SprintConfigUpdateInput;
};

/** Autogenerated return type of UpdateSprintConfig */
export type UpdateSprintConfigPayload = {
  __typename?: 'UpdateSprintConfigPayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  sprintConfig: SprintConfig;
};

/** Autogenerated input type of UpdateSprint */
export type UpdateSprintInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']>;
  name?: InputMaybe<Scalars['String']>;
  sprintId: Scalars['ID'];
};

/** Autogenerated return type of UpdateSprint */
export type UpdateSprintPayload = {
  __typename?: 'UpdateSprintPayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  sprint: Sprint;
};

/** Autogenerated input type of UpdateUserPermissions */
export type UpdateUserPermissionsInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']>;
  role: Scalars['String'];
  zenhubOrganizationId: Scalars['ID'];
  zenhubUserId: Scalars['ID'];
};

/** Autogenerated return type of UpdateUserPermissions */
export type UpdateUserPermissionsPayload = {
  __typename?: 'UpdateUserPermissionsPayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** @deprecated Replaced with a new type */
  role: Roles;
  zenhubOrgUser: ZenhubUserAtOrganization;
};

/** Autogenerated input type of UpdateWorkspace */
export type UpdateWorkspaceInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']>;
  defaultRepositoryGhId?: InputMaybe<Scalars['Int']>;
  description?: InputMaybe<Scalars['String']>;
  name: Scalars['String'];
  workspaceId: Scalars['ID'];
};

/** Autogenerated return type of UpdateWorkspace */
export type UpdateWorkspacePayload = {
  __typename?: 'UpdateWorkspacePayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  workspace: Workspace;
};

/** Autogenerated input type of UpdateZenhubEpicDates */
export type UpdateZenhubEpicDatesInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']>;
  endOn?: InputMaybe<Scalars['ISO8601Date']>;
  startOn?: InputMaybe<Scalars['ISO8601Date']>;
  zenhubEpicId: Scalars['ID'];
};

/** Autogenerated return type of UpdateZenhubEpicDates */
export type UpdateZenhubEpicDatesPayload = {
  __typename?: 'UpdateZenhubEpicDatesPayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  zenhubEpic: ZenhubEpic;
};

/** Autogenerated input type of UpdateZenhubEpic */
export type UpdateZenhubEpicInput = {
  body?: InputMaybe<Scalars['String']>;
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']>;
  title?: InputMaybe<Scalars['String']>;
  zenhubEpicId: Scalars['ID'];
};

/** Autogenerated return type of UpdateZenhubEpic */
export type UpdateZenhubEpicPayload = {
  __typename?: 'UpdateZenhubEpicPayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  zenhubEpic: ZenhubEpic;
};

/** Autogenerated input type of UpdateZenhubEpicState */
export type UpdateZenhubEpicStateInput = {
  applyToIssues?: InputMaybe<Scalars['Boolean']>;
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']>;
  state: ZenhubEpicState;
  zenhubEpicId: Scalars['ID'];
};

/** Autogenerated return type of UpdateZenhubEpicState */
export type UpdateZenhubEpicStatePayload = {
  __typename?: 'UpdateZenhubEpicStatePayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  zenhubEpic: ZenhubEpic;
};

/** Autogenerated input type of UpdateZenhubOrganization */
export type UpdateZenhubOrganizationInput = {
  address?: InputMaybe<Scalars['String']>;
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']>;
  defaultPaymentMethod?: InputMaybe<Scalars['String']>;
  email?: InputMaybe<Scalars['String']>;
  name?: InputMaybe<Scalars['String']>;
  nameOnInvoice?: InputMaybe<Scalars['String']>;
  taxId?: InputMaybe<Scalars['String']>;
  zenhubOrganizationId: Scalars['ID'];
};

/** Autogenerated return type of UpdateZenhubOrganization */
export type UpdateZenhubOrganizationPayload = {
  __typename?: 'UpdateZenhubOrganizationPayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  zenhubOrganization: ZenhubOrganization;
};

export type User = Owner & Timestamps & {
  __typename?: 'User';
  avatarUrl: Scalars['String'];
  createdAt: Scalars['ISO8601DateTime'];
  ghId?: Maybe<Scalars['Int']>;
  hasWorkspace: Scalars['Boolean'];
  id: Scalars['ID'];
  login: Scalars['String'];
  name?: Maybe<Scalars['String']>;
  projects: ProjectConnection;
  repositoryFavorites: RepositoryFavoriteConnection;
  roadmapItems: RoadmapItemConnection;
  searchWorkspaces: WorkspaceSearchMatchConnection;
  type: Scalars['String'];
  updatedAt: Scalars['ISO8601DateTime'];
  workspaceFavorites: WorkspaceFavoriteConnection;
  zenhubUser?: Maybe<ZenhubUser>;
};


export type UserProjectsArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
};


export type UserRepositoryFavoritesArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
};


export type UserRoadmapItemsArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
};


export type UserSearchWorkspacesArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  query: Scalars['String'];
  repositoryGhIds?: InputMaybe<Array<Scalars['Int']>>;
};


export type UserWorkspaceFavoritesArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
};

/** The connection type for User. */
export type UserConnection = {
  __typename?: 'UserConnection';
  /** A list of edges. */
  edges: Array<UserEdge>;
  /** A list of nodes. */
  nodes: Array<User>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  totalCount: Scalars['Int'];
};

/** An edge in a connection. */
export type UserEdge = {
  __typename?: 'UserEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
  /** The item at the end of the edge. */
  node: User;
};

export type VelocityDiff = {
  __typename?: 'VelocityDiff';
  difference?: Maybe<Scalars['Float']>;
  sprintsCount: Scalars['Int'];
  velocity: Scalars['Float'];
};

export type ViewerPermission = {
  viewerPermission: PermissionLevel;
};

export type Workspace = Timestamps & ViewerPermission & {
  __typename?: 'Workspace';
  activeSprint?: Maybe<Sprint>;
  assignees?: Maybe<UserConnection>;
  authors?: Maybe<UserConnection>;
  /** Average velocity of recently(last 3) closed sprints */
  averageSprintVelocity?: Maybe<Scalars['Float']>;
  /** Average velocity of recently closed sprints with last sprint influence */
  averageSprintVelocityWithDiff?: Maybe<VelocityDiff>;
  /** Only for querying control chart */
  closedPipeline: Pipeline;
  createdAt: Scalars['ISO8601DateTime'];
  defaultRepository?: Maybe<Repository>;
  description?: Maybe<Scalars['String']>;
  displayName: Scalars['String'];
  /** @deprecated This field must not be used. Use zenhubEpics. */
  epics?: Maybe<EpicConnection>;
  hasEstimatedIssues: Scalars['Boolean'];
  id: Scalars['ID'];
  importState: WorkspaceImportState;
  isDeletable: Scalars['Boolean'];
  isEditable: Scalars['Boolean'];
  isFavorite: Scalars['Boolean'];
  /** Returns the issue dependencies from all the repositories of the workspace. Optionally, the result can be filtered by repository. */
  issueDependencies?: Maybe<IssueDependencyConnection>;
  issueFlowStats?: Maybe<IssueFlowStats>;
  labelFilters: WorkspaceLabelFilterConnection;
  name?: Maybe<Scalars['String']>;
  pipelineToPipelineAutomations: PipelineToPipelineAutomationConnection;
  /** @deprecated Use `Workspace.pipelines_connection`. */
  pipelines: Array<Pipeline>;
  pipelinesConnection: PipelineConnection;
  previousSprint?: Maybe<Sprint>;
  /** @deprecated Use `Workspace.priorities_connection`. */
  priorities: Array<Priority>;
  prioritiesConnection: PriorityConnection;
  projects: ProjectConnection;
  relatedWorkspaces: WorkspaceConnection;
  releases: ReleaseConnection;
  /** @deprecated Use `Workspace.repositories_connection`. */
  repositories?: Maybe<Array<Repository>>;
  repositoriesConnection?: Maybe<RepositoryConnection>;
  repositoryGithubProjectImport?: Maybe<RepositoryGithubProjectImport>;
  roadmap: Roadmap;
  sprintConfig?: Maybe<SprintConfig>;
  sprints: SprintConnection;
  upcomingSprint?: Maybe<Sprint>;
  updatedAt: Scalars['ISO8601DateTime'];
  viewerPermission: PermissionLevel;
  zenhubEpics?: Maybe<ZenhubEpicConnection>;
  zenhubOrganization?: Maybe<ZenhubOrganization>;
  zenhubOwner?: Maybe<ZenhubIdentity>;
};


export type WorkspaceAssigneesArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  login?: InputMaybe<StringInput>;
  query?: InputMaybe<Scalars['String']>;
  repositoryGhIds?: InputMaybe<Array<Scalars['Int']>>;
};


export type WorkspaceAuthorsArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  login?: InputMaybe<StringInput>;
  query?: InputMaybe<Scalars['String']>;
  repositoryGhIds?: InputMaybe<Array<Scalars['Int']>>;
};


export type WorkspaceAverageSprintVelocityWithDiffArgs = {
  skipDiff?: InputMaybe<Scalars['Boolean']>;
};


export type WorkspaceEpicsArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  ids?: InputMaybe<Array<Scalars['ID']>>;
  last?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<EpicOrderInput>;
  query?: InputMaybe<Scalars['String']>;
  repositoryGhIds?: InputMaybe<Array<Scalars['Int']>>;
  state?: InputMaybe<IssueStateInput>;
};


export type WorkspaceIssueDependenciesArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  repositoryIds?: InputMaybe<Array<Scalars['ID']>>;
};


export type WorkspaceIssueFlowStatsArgs = {
  daysInCycle?: InputMaybe<Scalars['Int']>;
};


export type WorkspaceLabelFiltersArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
};


export type WorkspacePipelineToPipelineAutomationsArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
};


export type WorkspacePipelinesArgs = {
  includeClosed?: InputMaybe<Scalars['Boolean']>;
};


export type WorkspacePipelinesConnectionArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
};


export type WorkspacePrioritiesConnectionArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
};


export type WorkspaceProjectsArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  query?: InputMaybe<Scalars['String']>;
};


export type WorkspaceRelatedWorkspacesArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
};


export type WorkspaceReleasesArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  ids?: InputMaybe<Array<Scalars['ID']>>;
  last?: InputMaybe<Scalars['Int']>;
  query?: InputMaybe<Scalars['String']>;
  repositoryIds?: InputMaybe<Array<Scalars['ID']>>;
  state?: InputMaybe<ReleaseStateInput>;
};


export type WorkspaceRepositoriesConnectionArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
};


export type WorkspaceSprintsArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  filters?: InputMaybe<SprintFiltersInput>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<SprintOrderInput>;
  query?: InputMaybe<Scalars['String']>;
};


export type WorkspaceZenhubEpicsArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  filters?: InputMaybe<ZenhubEpicFiltersInput>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<ZenhubEpicOrderInput>;
  query?: InputMaybe<Scalars['String']>;
};

/** The connection type for Workspace. */
export type WorkspaceConnection = {
  __typename?: 'WorkspaceConnection';
  /** A list of edges. */
  edges: Array<WorkspaceEdge>;
  /** A list of nodes. */
  nodes: Array<Workspace>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  totalCount: Scalars['Int'];
};

/** An edge in a connection. */
export type WorkspaceEdge = {
  __typename?: 'WorkspaceEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
  /** The item at the end of the edge. */
  node: Workspace;
};

export type WorkspaceFavorite = Timestamps & {
  __typename?: 'WorkspaceFavorite';
  createdAt: Scalars['ISO8601DateTime'];
  id: Scalars['ID'];
  updatedAt: Scalars['ISO8601DateTime'];
  workspace: Workspace;
};

/** The connection type for WorkspaceFavorite. */
export type WorkspaceFavoriteConnection = {
  __typename?: 'WorkspaceFavoriteConnection';
  /** A list of edges. */
  edges: Array<WorkspaceFavoriteEdge>;
  /** A list of nodes. */
  nodes: Array<WorkspaceFavorite>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  totalCount: Scalars['Int'];
};

/** An edge in a connection. */
export type WorkspaceFavoriteEdge = {
  __typename?: 'WorkspaceFavoriteEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
  /** The item at the end of the edge. */
  node: WorkspaceFavorite;
};

export enum WorkspaceImportState {
  Completed = 'COMPLETED',
  InProgress = 'IN_PROGRESS',
  Pending = 'PENDING',
  Usable = 'USABLE'
}

export type WorkspaceLabelFilter = {
  __typename?: 'WorkspaceLabelFilter';
  id: Scalars['ID'];
  labelName: Scalars['String'];
  workspace: Workspace;
  zenhubLabel?: Maybe<ZenhubLabel>;
};

/** The connection type for WorkspaceLabelFilter. */
export type WorkspaceLabelFilterConnection = {
  __typename?: 'WorkspaceLabelFilterConnection';
  /** A list of edges. */
  edges: Array<WorkspaceLabelFilterEdge>;
  /** A list of nodes. */
  nodes: Array<WorkspaceLabelFilter>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  totalCount: Scalars['Int'];
};

/** An edge in a connection. */
export type WorkspaceLabelFilterEdge = {
  __typename?: 'WorkspaceLabelFilterEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
  /** The item at the end of the edge. */
  node: WorkspaceLabelFilter;
};

export type WorkspaceMatch = {
  __typename?: 'WorkspaceMatch';
  workspace: Workspace;
};

export type WorkspaceRepository = Timestamps & {
  __typename?: 'WorkspaceRepository';
  createdAt: Scalars['ISO8601DateTime'];
  id: Scalars['ID'];
  repository: Repository;
  updatedAt: Scalars['ISO8601DateTime'];
  workspace: Workspace;
};

export type WorkspaceSearchMatch = RepositoryMatch | WorkspaceMatch;

/** The connection type for WorkspaceSearchMatch. */
export type WorkspaceSearchMatchConnection = {
  __typename?: 'WorkspaceSearchMatchConnection';
  /** A list of edges. */
  edges: Array<WorkspaceSearchMatchEdge>;
  /** A list of nodes. */
  nodes: Array<WorkspaceSearchMatch>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  totalCount: Scalars['Int'];
};

/** An edge in a connection. */
export type WorkspaceSearchMatchEdge = {
  __typename?: 'WorkspaceSearchMatchEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
  /** The item at the end of the edge. */
  node?: Maybe<WorkspaceSearchMatch>;
};

export type ZenhubEpic = Node & Timestamps & ViewerPermission & ZenhubEpicIssueProgress & {
  __typename?: 'ZenhubEpic';
  assignees: ZenhubUserConnection;
  /** Dependencies that are blocked by this zenhub_epic */
  blockedItems: IssueDependencyItemConnection;
  /** Dependencies that are blocking this zenhub_epic */
  blockingItems: IssueDependencyItemConnection;
  body?: Maybe<Scalars['String']>;
  childIssues: IssueConnection;
  createdAt: Scalars['ISO8601DateTime'];
  creator?: Maybe<ZenhubUser>;
  endOn?: Maybe<Scalars['ISO8601Date']>;
  estimate?: Maybe<Estimate>;
  id: Scalars['ID'];
  labels: LabelConnection;
  oldIssue?: Maybe<Issue>;
  project?: Maybe<Project>;
  /** Dependencies that are related to this zenhub_epic */
  relatedItems: IssueDependencyItemConnection;
  startOn?: Maybe<Scalars['ISO8601Date']>;
  state: ZenhubEpicState;
  title: Scalars['String'];
  updatedAt: Scalars['ISO8601DateTime'];
  viewerPermission: PermissionLevel;
  zenhubIssueCountProgress?: Maybe<IssueCountProgress>;
  zenhubIssueEstimateProgress?: Maybe<IssueEstimateProgress>;
  zenhubOrganization: ZenhubOrganization;
};


export type ZenhubEpicAssigneesArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
};


export type ZenhubEpicBlockedItemsArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  filters?: InputMaybe<IssueDependencyItemFiltersInput>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
};


export type ZenhubEpicBlockingItemsArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  filters?: InputMaybe<IssueDependencyItemFiltersInput>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
};


export type ZenhubEpicChildIssuesArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  workspaceId: Scalars['ID'];
};


export type ZenhubEpicLabelsArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
};


export type ZenhubEpicRelatedItemsArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  filters?: InputMaybe<IssueDependencyItemFiltersInput>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
};

/** The connection type for ZenhubEpic. */
export type ZenhubEpicConnection = {
  __typename?: 'ZenhubEpicConnection';
  /** A list of edges. */
  edges: Array<ZenhubEpicEdge>;
  /** A list of nodes. */
  nodes: Array<ZenhubEpic>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  totalCount: Scalars['Int'];
};

/** An edge in a connection. */
export type ZenhubEpicEdge = {
  __typename?: 'ZenhubEpicEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
  /** The item at the end of the edge. */
  node: ZenhubEpic;
};

/** Filters for ZenhubEpic connection */
export type ZenhubEpicFiltersInput = {
  assigneeIds?: InputMaybe<IdInput>;
  estimateValues?: InputMaybe<FloatInput>;
  labelIds?: InputMaybe<IdInput>;
  matchType?: InputMaybe<MatchingFilter>;
  projectIds?: InputMaybe<IdInput>;
  state?: InputMaybe<ZenhubEpicStateFilterInput>;
};

export type ZenhubEpicInput = {
  body?: InputMaybe<Scalars['String']>;
  title: Scalars['String'];
};

export type ZenhubEpicIssueProgress = {
  zenhubIssueCountProgress?: Maybe<IssueCountProgress>;
  zenhubIssueEstimateProgress?: Maybe<IssueEstimateProgress>;
};

/** Filter issue search results */
export type ZenhubEpicIssueSearchFiltersInput = {
  workspaces?: InputMaybe<IdInput>;
};

export enum ZenhubEpicOrderField {
  Assignees = 'ASSIGNEES',
  CreatedAt = 'CREATED_AT',
  EndOn = 'END_ON',
  StartOn = 'START_ON',
  State = 'STATE',
  Title = 'TITLE',
  UpdatedAt = 'UPDATED_AT'
}

/** Order of ZenhubEpic connection */
export type ZenhubEpicOrderInput = {
  direction?: InputMaybe<OrderDirection>;
  field?: InputMaybe<ZenhubEpicOrderField>;
};

/** Filter issues by special Zenhub epic filters */
export type ZenhubEpicSearchFiltersInput = {
  id?: InputMaybe<IdInput>;
  specialFilters?: InputMaybe<ZenhubEpicSpecialFilter>;
};

export enum ZenhubEpicSpecialFilter {
  /** Show all issues not in an epic */
  NotInEpic = 'not_in_epic'
}

export enum ZenhubEpicState {
  Closed = 'CLOSED',
  InProgress = 'IN_PROGRESS',
  Open = 'OPEN',
  Todo = 'TODO'
}

/** Filter for ZenhubEpic state */
export type ZenhubEpicStateFilterInput = {
  in?: InputMaybe<Array<ZenhubEpicState>>;
  nin?: InputMaybe<Array<ZenhubEpicState>>;
};

export type ZenhubIdentity = ZenhubOrganization | ZenhubUser;

export type ZenhubLabel = Node & Timestamps & {
  __typename?: 'ZenhubLabel';
  color?: Maybe<Scalars['String']>;
  createdAt: Scalars['ISO8601DateTime'];
  description?: Maybe<Scalars['String']>;
  id: Scalars['ID'];
  name: Scalars['String'];
  updatedAt: Scalars['ISO8601DateTime'];
  zenhubEpics: ZenhubEpicConnection;
  zenhubOrganization: ZenhubOrganization;
};


export type ZenhubLabelZenhubEpicsArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
};

export type ZenhubOrganization = Node & Timestamps & {
  __typename?: 'ZenhubOrganization';
  createdAt: Scalars['ISO8601DateTime'];
  creator?: Maybe<ZenhubUser>;
  githubOrganization?: Maybe<Organization>;
  id: Scalars['ID'];
  name?: Maybe<Scalars['String']>;
  updatedAt: Scalars['ISO8601DateTime'];
  workspaces: WorkspaceConnection;
  /** @deprecated Use ZenhubOrganizationType.zenhub_users_at_organization instead */
  zenhubUsers?: Maybe<ZenhubUserConnection>;
  zenhubUsersAtOrganization?: Maybe<ZenhubUserAtOrganizationConnection>;
};


export type ZenhubOrganizationWorkspacesArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
};


export type ZenhubOrganizationZenhubUsersArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  emails?: InputMaybe<Array<Scalars['String']>>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  order?: InputMaybe<ZenhubUserOrderInput>;
  platformOnly?: InputMaybe<Scalars['Boolean']>;
  query?: InputMaybe<Scalars['String']>;
};


export type ZenhubOrganizationZenhubUsersAtOrganizationArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  emails?: InputMaybe<Array<Scalars['String']>>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  order?: InputMaybe<ZenhubUserOrderInput>;
  platformOnly?: InputMaybe<Scalars['Boolean']>;
  query?: InputMaybe<Scalars['String']>;
  role?: InputMaybe<Roles>;
  seatRequestPending?: InputMaybe<Scalars['Boolean']>;
  seated?: InputMaybe<Scalars['Boolean']>;
};

/** The connection type for ZenhubOrganization. */
export type ZenhubOrganizationConnection = {
  __typename?: 'ZenhubOrganizationConnection';
  /** A list of edges. */
  edges: Array<ZenhubOrganizationEdge>;
  /** A list of nodes. */
  nodes: Array<ZenhubOrganization>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  totalCount: Scalars['Int'];
};

/** An edge in a connection. */
export type ZenhubOrganizationEdge = {
  __typename?: 'ZenhubOrganizationEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
  /** The item at the end of the edge. */
  node: ZenhubOrganization;
};

export type ZenhubUser = Node & Timestamps & {
  __typename?: 'ZenhubUser';
  createdAt: Scalars['ISO8601DateTime'];
  email?: Maybe<Scalars['String']>;
  estimationGroups: EstimationGroupConnection;
  githubUser?: Maybe<User>;
  id: Scalars['ID'];
  imageUrl?: Maybe<Scalars['String']>;
  name?: Maybe<Scalars['String']>;
  /** @deprecated Use ZenhubOrganizationType#zenhub_users_at_organization or viewer_at_organization instead */
  role?: Maybe<Roles>;
  searchWorkspaces: WorkspaceConnection;
  updatedAt: Scalars['ISO8601DateTime'];
  workspaceFavorites: WorkspaceFavoriteConnection;
  zenhubOrganizations: ZenhubOrganizationConnection;
};


export type ZenhubUserEstimationGroupsArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  workspaceId: Scalars['ID'];
};


export type ZenhubUserRoleArgs = {
  zenhubOrganizationId: Scalars['ID'];
};


export type ZenhubUserSearchWorkspacesArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  query: Scalars['String'];
};


export type ZenhubUserWorkspaceFavoritesArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
};


export type ZenhubUserZenhubOrganizationsArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
};

export type ZenhubUserAtOrganization = Node & Timestamps & {
  __typename?: 'ZenhubUserAtOrganization';
  createdAt: Scalars['ISO8601DateTime'];
  email?: Maybe<Scalars['String']>;
  estimationGroups: EstimationGroupConnection;
  githubUser?: Maybe<User>;
  id: Scalars['ID'];
  imageUrl?: Maybe<Scalars['String']>;
  name?: Maybe<Scalars['String']>;
  role?: Maybe<Roles>;
  searchWorkspaces: WorkspaceConnection;
  seatRequestedAt?: Maybe<Scalars['ISO8601DateTime']>;
  seated?: Maybe<Scalars['Boolean']>;
  updatedAt: Scalars['ISO8601DateTime'];
  workspaceFavorites: WorkspaceFavoriteConnection;
  zenhubOrganizations: ZenhubOrganizationConnection;
};


export type ZenhubUserAtOrganizationEstimationGroupsArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  workspaceId: Scalars['ID'];
};


export type ZenhubUserAtOrganizationSearchWorkspacesArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  query: Scalars['String'];
};


export type ZenhubUserAtOrganizationWorkspaceFavoritesArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
};


export type ZenhubUserAtOrganizationZenhubOrganizationsArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
};

/** The connection type for ZenhubUserAtOrganization. */
export type ZenhubUserAtOrganizationConnection = {
  __typename?: 'ZenhubUserAtOrganizationConnection';
  /** A list of edges. */
  edges: Array<ZenhubUserAtOrganizationEdge>;
  /** A list of nodes. */
  nodes: Array<ZenhubUserAtOrganization>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  totalCount: Scalars['Int'];
};

/** An edge in a connection. */
export type ZenhubUserAtOrganizationEdge = {
  __typename?: 'ZenhubUserAtOrganizationEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
  /** The item at the end of the edge. */
  node: ZenhubUserAtOrganization;
};

/** The connection type for ZenhubUser. */
export type ZenhubUserConnection = {
  __typename?: 'ZenhubUserConnection';
  /** A list of edges. */
  edges: Array<ZenhubUserEdge>;
  /** A list of nodes. */
  nodes: Array<ZenhubUser>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  totalCount: Scalars['Int'];
};

/** An edge in a connection. */
export type ZenhubUserEdge = {
  __typename?: 'ZenhubUserEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
  /** The item at the end of the edge. */
  node: ZenhubUser;
};

export enum ZenhubUserOrderField {
  DisplayName = 'DISPLAY_NAME'
}

/** Order of ZenhubUser connection */
export type ZenhubUserOrderInput = {
  direction?: InputMaybe<OrderDirection>;
  field?: InputMaybe<ZenhubUserOrderField>;
};
